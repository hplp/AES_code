#include <stdio.h>
#include <xparameters.h>
#include "xaes_full_axis128.h"
#include "xaxidma.h"

// Aes_fill and axiDMA pointers and handlers
XAes_full_axis128 Aes_full_axis128;
XAes_full_axis128_Config *Aes_full_axis128_cfg;
XAxiDma axiDMA;
XAxiDma_Config *axiDMA_cfg;

// DMA addresses
#define MEM_BASE_ADDR 0x01000000
#define TX_BUFFER_BASE (MEM_BASE_ADDR+0x00100000)
#define RX_BUFFER_BASE (MEM_BASE_ADDR+0x00300000)

void initPeripherals() {
	printf("initializing AES_Full_axis128\n");
	Aes_full_axis128_cfg = XAes_full_axis128_LookupConfig(XPAR_AES_AXIS128_FULL_0_DEVICE_ID);
	if (Aes_full_axis128_cfg) {
		int status = XAes_full_axis128_CfgInitialize(&Aes_full_axis128, Aes_full_axis128_cfg);
		if (status != XST_SUCCESS)
			printf("Error initializing AES_Full_axis128 core\n");
	}

	printf("initializing AxiDMA\n");
	axiDMA_cfg = XAxiDma_LookupConfig(XPAR_AXIDMA_0_DEVICE_ID);
	if (axiDMA_cfg) {
		int status = XAxiDma_CfgInitialize(&axiDMA, axiDMA_cfg);
		if (status != XST_SUCCESS)
			printf("Error initializing AxiDMA core\n");
	}

	// disable interrupts
	XAxiDma_IntrDisable(&axiDMA, XAXIDMA_IRQ_ALL_MASK, XAXIDMA_DEVICE_TO_DMA);
	XAxiDma_IntrDisable(&axiDMA, XAXIDMA_IRQ_ALL_MASK, XAXIDMA_DMA_TO_DEVICE);
}

char random_char() {
	unsigned short min_ascii = 65;
	unsigned short max_ascii = 90;
	return min_ascii + rand() % (max_ascii - min_ascii + 1);
}

int main()
{
	printf("random %d\n", random_char());
	return 0;
}
