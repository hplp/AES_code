// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module MixColumns (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        state_0_read,
        state_1_read,
        state_2_read,
        state_3_read,
        state_4_read,
        state_5_read,
        state_6_read,
        state_7_read,
        state_8_read,
        state_9_read,
        state_10_read,
        state_11_read,
        state_1213_read,
        state_13_read,
        state_14_read,
        state_15_read,
        ap_return_0,
        ap_return_1,
        ap_return_2,
        ap_return_3,
        ap_return_4,
        ap_return_5,
        ap_return_6,
        ap_return_7,
        ap_return_8,
        ap_return_9,
        ap_return_10,
        ap_return_11,
        ap_return_12,
        ap_return_13,
        ap_return_14,
        ap_return_15
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_state2 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [7:0] state_0_read;
input  [7:0] state_1_read;
input  [7:0] state_2_read;
input  [7:0] state_3_read;
input  [7:0] state_4_read;
input  [7:0] state_5_read;
input  [7:0] state_6_read;
input  [7:0] state_7_read;
input  [7:0] state_8_read;
input  [7:0] state_9_read;
input  [7:0] state_10_read;
input  [7:0] state_11_read;
input  [7:0] state_1213_read;
input  [7:0] state_13_read;
input  [7:0] state_14_read;
input  [7:0] state_15_read;
output  [7:0] ap_return_0;
output  [7:0] ap_return_1;
output  [7:0] ap_return_2;
output  [7:0] ap_return_3;
output  [7:0] ap_return_4;
output  [7:0] ap_return_5;
output  [7:0] ap_return_6;
output  [7:0] ap_return_7;
output  [7:0] ap_return_8;
output  [7:0] ap_return_9;
output  [7:0] ap_return_10;
output  [7:0] ap_return_11;
output  [7:0] ap_return_12;
output  [7:0] ap_return_13;
output  [7:0] ap_return_14;
output  [7:0] ap_return_15;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[7:0] ap_return_0;
reg[7:0] ap_return_1;
reg[7:0] ap_return_2;
reg[7:0] ap_return_3;
reg[7:0] ap_return_4;
reg[7:0] ap_return_5;
reg[7:0] ap_return_6;
reg[7:0] ap_return_7;
reg[7:0] ap_return_8;
reg[7:0] ap_return_9;
reg[7:0] ap_return_10;
reg[7:0] ap_return_11;
reg[7:0] ap_return_12;
reg[7:0] ap_return_13;
reg[7:0] ap_return_14;
reg[7:0] ap_return_15;

(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [9:0] cipher_address0;
reg    cipher_ce0;
wire   [7:0] cipher_q0;
wire   [9:0] cipher_address1;
reg    cipher_ce1;
wire   [7:0] cipher_q1;
wire   [9:0] cipher_address2;
reg    cipher_ce2;
wire   [7:0] cipher_q2;
wire   [9:0] cipher_address3;
reg    cipher_ce3;
wire   [7:0] cipher_q3;
wire   [9:0] cipher_address4;
reg    cipher_ce4;
wire   [7:0] cipher_q4;
wire   [9:0] cipher_address5;
reg    cipher_ce5;
wire   [7:0] cipher_q5;
wire   [9:0] cipher_address6;
reg    cipher_ce6;
wire   [7:0] cipher_q6;
wire   [9:0] cipher_address7;
reg    cipher_ce7;
wire   [7:0] cipher_q7;
wire   [9:0] cipher_address8;
reg    cipher_ce8;
wire   [7:0] cipher_q8;
wire   [9:0] cipher_address9;
reg    cipher_ce9;
wire   [7:0] cipher_q9;
wire   [9:0] cipher_address10;
reg    cipher_ce10;
wire   [7:0] cipher_q10;
wire   [9:0] cipher_address11;
reg    cipher_ce11;
wire   [7:0] cipher_q11;
wire   [9:0] cipher_address12;
reg    cipher_ce12;
wire   [7:0] cipher_q12;
wire   [9:0] cipher_address13;
reg    cipher_ce13;
wire   [7:0] cipher_q13;
wire   [9:0] cipher_address14;
reg    cipher_ce14;
wire   [7:0] cipher_q14;
wire   [9:0] cipher_address15;
reg    cipher_ce15;
wire   [7:0] cipher_q15;
wire   [9:0] cipher_address16;
reg    cipher_ce16;
wire   [7:0] cipher_q16;
wire   [9:0] cipher_address17;
reg    cipher_ce17;
wire   [7:0] cipher_q17;
wire   [9:0] cipher_address18;
reg    cipher_ce18;
wire   [7:0] cipher_q18;
wire   [9:0] cipher_address19;
reg    cipher_ce19;
wire   [7:0] cipher_q19;
wire   [9:0] cipher_address20;
reg    cipher_ce20;
wire   [7:0] cipher_q20;
wire   [9:0] cipher_address21;
reg    cipher_ce21;
wire   [7:0] cipher_q21;
wire   [9:0] cipher_address22;
reg    cipher_ce22;
wire   [7:0] cipher_q22;
wire   [9:0] cipher_address23;
reg    cipher_ce23;
wire   [7:0] cipher_q23;
wire   [9:0] cipher_address24;
reg    cipher_ce24;
wire   [7:0] cipher_q24;
wire   [9:0] cipher_address25;
reg    cipher_ce25;
wire   [7:0] cipher_q25;
wire   [9:0] cipher_address26;
reg    cipher_ce26;
wire   [7:0] cipher_q26;
wire   [9:0] cipher_address27;
reg    cipher_ce27;
wire   [7:0] cipher_q27;
wire   [9:0] cipher_address28;
reg    cipher_ce28;
wire   [7:0] cipher_q28;
wire   [9:0] cipher_address29;
reg    cipher_ce29;
wire   [7:0] cipher_q29;
wire   [9:0] cipher_address30;
reg    cipher_ce30;
wire   [7:0] cipher_q30;
wire   [9:0] cipher_address31;
reg    cipher_ce31;
wire   [7:0] cipher_q31;
wire   [63:0] addr_fu_527_p3;
wire   [63:0] addr1_fu_536_p3;
wire   [63:0] addr2_fu_545_p3;
wire   [63:0] addr3_fu_554_p3;
wire   [63:0] addr4_fu_563_p3;
wire   [63:0] addr5_fu_572_p3;
wire   [63:0] addr6_fu_581_p3;
wire   [63:0] addr7_fu_590_p3;
wire   [63:0] addr8_fu_599_p3;
wire   [63:0] addr9_fu_608_p3;
wire   [63:0] addr10_fu_617_p3;
wire   [63:0] addr11_fu_626_p3;
wire   [63:0] addr12_fu_635_p3;
wire   [63:0] addr13_fu_644_p3;
wire   [63:0] addr14_fu_653_p3;
wire   [63:0] addr15_fu_662_p3;
wire   [63:0] addr16_fu_671_p3;
wire   [63:0] addr17_fu_680_p3;
wire   [63:0] addr18_fu_689_p3;
wire   [63:0] addr19_fu_698_p3;
wire   [63:0] addr20_fu_707_p3;
wire   [63:0] addr21_fu_716_p3;
wire   [63:0] addr22_fu_725_p3;
wire   [63:0] addr23_fu_734_p3;
wire   [63:0] addr24_fu_743_p3;
wire   [63:0] addr25_fu_752_p3;
wire   [63:0] addr26_fu_761_p3;
wire   [63:0] addr27_fu_770_p3;
wire   [63:0] addr28_fu_779_p3;
wire   [63:0] addr29_fu_788_p3;
wire   [63:0] addr30_fu_797_p3;
wire   [63:0] addr31_fu_806_p3;
wire    ap_CS_fsm_state2;
wire   [7:0] tmp2_fu_821_p2;
wire   [7:0] tmp1_fu_815_p2;
wire   [7:0] tmp4_fu_837_p2;
wire   [7:0] tmp3_fu_831_p2;
wire   [7:0] tmp6_fu_853_p2;
wire   [7:0] tmp5_fu_847_p2;
wire   [7:0] tmp8_fu_869_p2;
wire   [7:0] tmp7_fu_863_p2;
wire   [7:0] tmp_fu_885_p2;
wire   [7:0] tmp9_fu_879_p2;
wire   [7:0] tmp11_fu_901_p2;
wire   [7:0] tmp10_fu_895_p2;
wire   [7:0] tmp13_fu_917_p2;
wire   [7:0] tmp12_fu_911_p2;
wire   [7:0] tmp15_fu_933_p2;
wire   [7:0] tmp14_fu_927_p2;
wire   [7:0] tmp17_fu_949_p2;
wire   [7:0] tmp16_fu_943_p2;
wire   [7:0] tmp19_fu_965_p2;
wire   [7:0] tmp18_fu_959_p2;
wire   [7:0] tmp21_fu_981_p2;
wire   [7:0] tmp20_fu_975_p2;
wire   [7:0] tmp23_fu_997_p2;
wire   [7:0] tmp22_fu_991_p2;
wire   [7:0] tmp25_fu_1013_p2;
wire   [7:0] tmp24_fu_1007_p2;
wire   [7:0] tmp27_fu_1029_p2;
wire   [7:0] tmp26_fu_1023_p2;
wire   [7:0] tmp29_fu_1045_p2;
wire   [7:0] tmp28_fu_1039_p2;
wire   [7:0] tmp31_fu_1061_p2;
wire   [7:0] tmp30_fu_1055_p2;
wire   [7:0] state_fu_825_p2;
wire   [7:0] state_1_fu_841_p2;
wire   [7:0] state_2_fu_857_p2;
wire   [7:0] state_3_fu_873_p2;
wire   [7:0] state_4_fu_889_p2;
wire   [7:0] state_5_fu_905_p2;
wire   [7:0] state_6_fu_921_p2;
wire   [7:0] state_7_fu_937_p2;
wire   [7:0] state_8_fu_953_p2;
wire   [7:0] state_9_fu_969_p2;
wire   [7:0] state_s_fu_985_p2;
wire   [7:0] state_10_fu_1001_p2;
wire   [7:0] state_11_fu_1017_p2;
wire   [7:0] state_12_fu_1033_p2;
wire   [7:0] state_13_fu_1049_p2;
wire   [7:0] state_14_fu_1065_p2;
reg   [7:0] ap_return_0_preg;
reg   [7:0] ap_return_1_preg;
reg   [7:0] ap_return_2_preg;
reg   [7:0] ap_return_3_preg;
reg   [7:0] ap_return_4_preg;
reg   [7:0] ap_return_5_preg;
reg   [7:0] ap_return_6_preg;
reg   [7:0] ap_return_7_preg;
reg   [7:0] ap_return_8_preg;
reg   [7:0] ap_return_9_preg;
reg   [7:0] ap_return_10_preg;
reg   [7:0] ap_return_11_preg;
reg   [7:0] ap_return_12_preg;
reg   [7:0] ap_return_13_preg;
reg   [7:0] ap_return_14_preg;
reg   [7:0] ap_return_15_preg;
reg   [1:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
#0 ap_return_0_preg = 8'd0;
#0 ap_return_1_preg = 8'd0;
#0 ap_return_2_preg = 8'd0;
#0 ap_return_3_preg = 8'd0;
#0 ap_return_4_preg = 8'd0;
#0 ap_return_5_preg = 8'd0;
#0 ap_return_6_preg = 8'd0;
#0 ap_return_7_preg = 8'd0;
#0 ap_return_8_preg = 8'd0;
#0 ap_return_9_preg = 8'd0;
#0 ap_return_10_preg = 8'd0;
#0 ap_return_11_preg = 8'd0;
#0 ap_return_12_preg = 8'd0;
#0 ap_return_13_preg = 8'd0;
#0 ap_return_14_preg = 8'd0;
#0 ap_return_15_preg = 8'd0;
end

MixColumns_cipher #(
    .DataWidth( 8 ),
    .AddressRange( 768 ),
    .AddressWidth( 10 ))
cipher_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(cipher_address0),
    .ce0(cipher_ce0),
    .q0(cipher_q0),
    .address1(cipher_address1),
    .ce1(cipher_ce1),
    .q1(cipher_q1),
    .address2(cipher_address2),
    .ce2(cipher_ce2),
    .q2(cipher_q2),
    .address3(cipher_address3),
    .ce3(cipher_ce3),
    .q3(cipher_q3),
    .address4(cipher_address4),
    .ce4(cipher_ce4),
    .q4(cipher_q4),
    .address5(cipher_address5),
    .ce5(cipher_ce5),
    .q5(cipher_q5),
    .address6(cipher_address6),
    .ce6(cipher_ce6),
    .q6(cipher_q6),
    .address7(cipher_address7),
    .ce7(cipher_ce7),
    .q7(cipher_q7),
    .address8(cipher_address8),
    .ce8(cipher_ce8),
    .q8(cipher_q8),
    .address9(cipher_address9),
    .ce9(cipher_ce9),
    .q9(cipher_q9),
    .address10(cipher_address10),
    .ce10(cipher_ce10),
    .q10(cipher_q10),
    .address11(cipher_address11),
    .ce11(cipher_ce11),
    .q11(cipher_q11),
    .address12(cipher_address12),
    .ce12(cipher_ce12),
    .q12(cipher_q12),
    .address13(cipher_address13),
    .ce13(cipher_ce13),
    .q13(cipher_q13),
    .address14(cipher_address14),
    .ce14(cipher_ce14),
    .q14(cipher_q14),
    .address15(cipher_address15),
    .ce15(cipher_ce15),
    .q15(cipher_q15),
    .address16(cipher_address16),
    .ce16(cipher_ce16),
    .q16(cipher_q16),
    .address17(cipher_address17),
    .ce17(cipher_ce17),
    .q17(cipher_q17),
    .address18(cipher_address18),
    .ce18(cipher_ce18),
    .q18(cipher_q18),
    .address19(cipher_address19),
    .ce19(cipher_ce19),
    .q19(cipher_q19),
    .address20(cipher_address20),
    .ce20(cipher_ce20),
    .q20(cipher_q20),
    .address21(cipher_address21),
    .ce21(cipher_ce21),
    .q21(cipher_q21),
    .address22(cipher_address22),
    .ce22(cipher_ce22),
    .q22(cipher_q22),
    .address23(cipher_address23),
    .ce23(cipher_ce23),
    .q23(cipher_q23),
    .address24(cipher_address24),
    .ce24(cipher_ce24),
    .q24(cipher_q24),
    .address25(cipher_address25),
    .ce25(cipher_ce25),
    .q25(cipher_q25),
    .address26(cipher_address26),
    .ce26(cipher_ce26),
    .q26(cipher_q26),
    .address27(cipher_address27),
    .ce27(cipher_ce27),
    .q27(cipher_q27),
    .address28(cipher_address28),
    .ce28(cipher_ce28),
    .q28(cipher_q28),
    .address29(cipher_address29),
    .ce29(cipher_ce29),
    .q29(cipher_q29),
    .address30(cipher_address30),
    .ce30(cipher_ce30),
    .q30(cipher_q30),
    .address31(cipher_address31),
    .ce31(cipher_ce31),
    .q31(cipher_q31)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_0_preg <= 8'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state2)) begin
            ap_return_0_preg <= state_fu_825_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_10_preg <= 8'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state2)) begin
            ap_return_10_preg <= state_s_fu_985_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_11_preg <= 8'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state2)) begin
            ap_return_11_preg <= state_10_fu_1001_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_12_preg <= 8'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state2)) begin
            ap_return_12_preg <= state_11_fu_1017_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_13_preg <= 8'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state2)) begin
            ap_return_13_preg <= state_12_fu_1033_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_14_preg <= 8'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state2)) begin
            ap_return_14_preg <= state_13_fu_1049_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_15_preg <= 8'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state2)) begin
            ap_return_15_preg <= state_14_fu_1065_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_1_preg <= 8'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state2)) begin
            ap_return_1_preg <= state_1_fu_841_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_2_preg <= 8'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state2)) begin
            ap_return_2_preg <= state_2_fu_857_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_3_preg <= 8'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state2)) begin
            ap_return_3_preg <= state_3_fu_873_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_4_preg <= 8'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state2)) begin
            ap_return_4_preg <= state_4_fu_889_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_5_preg <= 8'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state2)) begin
            ap_return_5_preg <= state_5_fu_905_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_6_preg <= 8'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state2)) begin
            ap_return_6_preg <= state_6_fu_921_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_7_preg <= 8'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state2)) begin
            ap_return_7_preg <= state_7_fu_937_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_8_preg <= 8'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state2)) begin
            ap_return_8_preg <= state_8_fu_953_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_9_preg <= 8'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state2)) begin
            ap_return_9_preg <= state_9_fu_969_p2;
        end
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ap_return_0 = state_fu_825_p2;
    end else begin
        ap_return_0 = ap_return_0_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ap_return_1 = state_1_fu_841_p2;
    end else begin
        ap_return_1 = ap_return_1_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ap_return_10 = state_s_fu_985_p2;
    end else begin
        ap_return_10 = ap_return_10_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ap_return_11 = state_10_fu_1001_p2;
    end else begin
        ap_return_11 = ap_return_11_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ap_return_12 = state_11_fu_1017_p2;
    end else begin
        ap_return_12 = ap_return_12_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ap_return_13 = state_12_fu_1033_p2;
    end else begin
        ap_return_13 = ap_return_13_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ap_return_14 = state_13_fu_1049_p2;
    end else begin
        ap_return_14 = ap_return_14_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ap_return_15 = state_14_fu_1065_p2;
    end else begin
        ap_return_15 = ap_return_15_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ap_return_2 = state_2_fu_857_p2;
    end else begin
        ap_return_2 = ap_return_2_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ap_return_3 = state_3_fu_873_p2;
    end else begin
        ap_return_3 = ap_return_3_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ap_return_4 = state_4_fu_889_p2;
    end else begin
        ap_return_4 = ap_return_4_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ap_return_5 = state_5_fu_905_p2;
    end else begin
        ap_return_5 = ap_return_5_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ap_return_6 = state_6_fu_921_p2;
    end else begin
        ap_return_6 = ap_return_6_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ap_return_7 = state_7_fu_937_p2;
    end else begin
        ap_return_7 = ap_return_7_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ap_return_8 = state_8_fu_953_p2;
    end else begin
        ap_return_8 = ap_return_8_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ap_return_9 = state_9_fu_969_p2;
    end else begin
        ap_return_9 = ap_return_9_preg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        cipher_ce0 = 1'b1;
    end else begin
        cipher_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        cipher_ce1 = 1'b1;
    end else begin
        cipher_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        cipher_ce10 = 1'b1;
    end else begin
        cipher_ce10 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        cipher_ce11 = 1'b1;
    end else begin
        cipher_ce11 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        cipher_ce12 = 1'b1;
    end else begin
        cipher_ce12 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        cipher_ce13 = 1'b1;
    end else begin
        cipher_ce13 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        cipher_ce14 = 1'b1;
    end else begin
        cipher_ce14 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        cipher_ce15 = 1'b1;
    end else begin
        cipher_ce15 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        cipher_ce16 = 1'b1;
    end else begin
        cipher_ce16 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        cipher_ce17 = 1'b1;
    end else begin
        cipher_ce17 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        cipher_ce18 = 1'b1;
    end else begin
        cipher_ce18 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        cipher_ce19 = 1'b1;
    end else begin
        cipher_ce19 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        cipher_ce2 = 1'b1;
    end else begin
        cipher_ce2 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        cipher_ce20 = 1'b1;
    end else begin
        cipher_ce20 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        cipher_ce21 = 1'b1;
    end else begin
        cipher_ce21 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        cipher_ce22 = 1'b1;
    end else begin
        cipher_ce22 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        cipher_ce23 = 1'b1;
    end else begin
        cipher_ce23 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        cipher_ce24 = 1'b1;
    end else begin
        cipher_ce24 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        cipher_ce25 = 1'b1;
    end else begin
        cipher_ce25 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        cipher_ce26 = 1'b1;
    end else begin
        cipher_ce26 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        cipher_ce27 = 1'b1;
    end else begin
        cipher_ce27 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        cipher_ce28 = 1'b1;
    end else begin
        cipher_ce28 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        cipher_ce29 = 1'b1;
    end else begin
        cipher_ce29 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        cipher_ce3 = 1'b1;
    end else begin
        cipher_ce3 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        cipher_ce30 = 1'b1;
    end else begin
        cipher_ce30 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        cipher_ce31 = 1'b1;
    end else begin
        cipher_ce31 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        cipher_ce4 = 1'b1;
    end else begin
        cipher_ce4 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        cipher_ce5 = 1'b1;
    end else begin
        cipher_ce5 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        cipher_ce6 = 1'b1;
    end else begin
        cipher_ce6 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        cipher_ce7 = 1'b1;
    end else begin
        cipher_ce7 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        cipher_ce8 = 1'b1;
    end else begin
        cipher_ce8 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        cipher_ce9 = 1'b1;
    end else begin
        cipher_ce9 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign addr10_fu_617_p3 = {{56'd1}, {state_5_read}};

assign addr11_fu_626_p3 = {{56'd2}, {state_6_read}};

assign addr12_fu_635_p3 = {{56'd1}, {state_6_read}};

assign addr13_fu_644_p3 = {{56'd2}, {state_7_read}};

assign addr14_fu_653_p3 = {{56'd2}, {state_4_read}};

assign addr15_fu_662_p3 = {{56'd1}, {state_7_read}};

assign addr16_fu_671_p3 = {{56'd1}, {state_8_read}};

assign addr17_fu_680_p3 = {{56'd2}, {state_9_read}};

assign addr18_fu_689_p3 = {{56'd1}, {state_9_read}};

assign addr19_fu_698_p3 = {{56'd2}, {state_10_read}};

assign addr1_fu_536_p3 = {{56'd2}, {state_1_read}};

assign addr20_fu_707_p3 = {{56'd1}, {state_10_read}};

assign addr21_fu_716_p3 = {{56'd2}, {state_11_read}};

assign addr22_fu_725_p3 = {{56'd2}, {state_8_read}};

assign addr23_fu_734_p3 = {{56'd1}, {state_11_read}};

assign addr24_fu_743_p3 = {{56'd1}, {state_1213_read}};

assign addr25_fu_752_p3 = {{56'd2}, {state_13_read}};

assign addr26_fu_761_p3 = {{56'd1}, {state_13_read}};

assign addr27_fu_770_p3 = {{56'd2}, {state_14_read}};

assign addr28_fu_779_p3 = {{56'd1}, {state_14_read}};

assign addr29_fu_788_p3 = {{56'd2}, {state_15_read}};

assign addr2_fu_545_p3 = {{56'd1}, {state_1_read}};

assign addr30_fu_797_p3 = {{56'd2}, {state_1213_read}};

assign addr31_fu_806_p3 = {{56'd1}, {state_15_read}};

assign addr3_fu_554_p3 = {{56'd2}, {state_2_read}};

assign addr4_fu_563_p3 = {{56'd1}, {state_2_read}};

assign addr5_fu_572_p3 = {{56'd2}, {state_3_read}};

assign addr6_fu_581_p3 = {{56'd2}, {state_0_read}};

assign addr7_fu_590_p3 = {{56'd1}, {state_3_read}};

assign addr8_fu_599_p3 = {{56'd1}, {state_4_read}};

assign addr9_fu_608_p3 = {{56'd2}, {state_5_read}};

assign addr_fu_527_p3 = {{56'd1}, {state_0_read}};

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign cipher_address0 = addr_fu_527_p3;

assign cipher_address1 = addr1_fu_536_p3;

assign cipher_address10 = addr10_fu_617_p3;

assign cipher_address11 = addr11_fu_626_p3;

assign cipher_address12 = addr12_fu_635_p3;

assign cipher_address13 = addr13_fu_644_p3;

assign cipher_address14 = addr14_fu_653_p3;

assign cipher_address15 = addr15_fu_662_p3;

assign cipher_address16 = addr16_fu_671_p3;

assign cipher_address17 = addr17_fu_680_p3;

assign cipher_address18 = addr18_fu_689_p3;

assign cipher_address19 = addr19_fu_698_p3;

assign cipher_address2 = addr2_fu_545_p3;

assign cipher_address20 = addr20_fu_707_p3;

assign cipher_address21 = addr21_fu_716_p3;

assign cipher_address22 = addr22_fu_725_p3;

assign cipher_address23 = addr23_fu_734_p3;

assign cipher_address24 = addr24_fu_743_p3;

assign cipher_address25 = addr25_fu_752_p3;

assign cipher_address26 = addr26_fu_761_p3;

assign cipher_address27 = addr27_fu_770_p3;

assign cipher_address28 = addr28_fu_779_p3;

assign cipher_address29 = addr29_fu_788_p3;

assign cipher_address3 = addr3_fu_554_p3;

assign cipher_address30 = addr30_fu_797_p3;

assign cipher_address31 = addr31_fu_806_p3;

assign cipher_address4 = addr4_fu_563_p3;

assign cipher_address5 = addr5_fu_572_p3;

assign cipher_address6 = addr6_fu_581_p3;

assign cipher_address7 = addr7_fu_590_p3;

assign cipher_address8 = addr8_fu_599_p3;

assign cipher_address9 = addr9_fu_608_p3;

assign state_10_fu_1001_p2 = (tmp23_fu_997_p2 ^ tmp22_fu_991_p2);

assign state_11_fu_1017_p2 = (tmp25_fu_1013_p2 ^ tmp24_fu_1007_p2);

assign state_12_fu_1033_p2 = (tmp27_fu_1029_p2 ^ tmp26_fu_1023_p2);

assign state_13_fu_1049_p2 = (tmp29_fu_1045_p2 ^ tmp28_fu_1039_p2);

assign state_14_fu_1065_p2 = (tmp31_fu_1061_p2 ^ tmp30_fu_1055_p2);

assign state_1_fu_841_p2 = (tmp4_fu_837_p2 ^ tmp3_fu_831_p2);

assign state_2_fu_857_p2 = (tmp6_fu_853_p2 ^ tmp5_fu_847_p2);

assign state_3_fu_873_p2 = (tmp8_fu_869_p2 ^ tmp7_fu_863_p2);

assign state_4_fu_889_p2 = (tmp_fu_885_p2 ^ tmp9_fu_879_p2);

assign state_5_fu_905_p2 = (tmp11_fu_901_p2 ^ tmp10_fu_895_p2);

assign state_6_fu_921_p2 = (tmp13_fu_917_p2 ^ tmp12_fu_911_p2);

assign state_7_fu_937_p2 = (tmp15_fu_933_p2 ^ tmp14_fu_927_p2);

assign state_8_fu_953_p2 = (tmp17_fu_949_p2 ^ tmp16_fu_943_p2);

assign state_9_fu_969_p2 = (tmp19_fu_965_p2 ^ tmp18_fu_959_p2);

assign state_fu_825_p2 = (tmp2_fu_821_p2 ^ tmp1_fu_815_p2);

assign state_s_fu_985_p2 = (tmp21_fu_981_p2 ^ tmp20_fu_975_p2);

assign tmp10_fu_895_p2 = (cipher_q11 ^ cipher_q10);

assign tmp11_fu_901_p2 = (state_7_read ^ state_4_read);

assign tmp12_fu_911_p2 = (cipher_q13 ^ cipher_q12);

assign tmp13_fu_917_p2 = (state_5_read ^ state_4_read);

assign tmp14_fu_927_p2 = (cipher_q15 ^ cipher_q14);

assign tmp15_fu_933_p2 = (state_6_read ^ state_5_read);

assign tmp16_fu_943_p2 = (cipher_q17 ^ cipher_q16);

assign tmp17_fu_949_p2 = (state_11_read ^ state_10_read);

assign tmp18_fu_959_p2 = (cipher_q19 ^ cipher_q18);

assign tmp19_fu_965_p2 = (state_8_read ^ state_11_read);

assign tmp1_fu_815_p2 = (cipher_q1 ^ cipher_q0);

assign tmp20_fu_975_p2 = (cipher_q21 ^ cipher_q20);

assign tmp21_fu_981_p2 = (state_9_read ^ state_8_read);

assign tmp22_fu_991_p2 = (cipher_q23 ^ cipher_q22);

assign tmp23_fu_997_p2 = (state_9_read ^ state_10_read);

assign tmp24_fu_1007_p2 = (cipher_q25 ^ cipher_q24);

assign tmp25_fu_1013_p2 = (state_15_read ^ state_14_read);

assign tmp26_fu_1023_p2 = (cipher_q27 ^ cipher_q26);

assign tmp27_fu_1029_p2 = (state_15_read ^ state_1213_read);

assign tmp28_fu_1039_p2 = (cipher_q29 ^ cipher_q28);

assign tmp29_fu_1045_p2 = (state_13_read ^ state_1213_read);

assign tmp2_fu_821_p2 = (state_3_read ^ state_2_read);

assign tmp30_fu_1055_p2 = (cipher_q31 ^ cipher_q30);

assign tmp31_fu_1061_p2 = (state_14_read ^ state_13_read);

assign tmp3_fu_831_p2 = (cipher_q3 ^ cipher_q2);

assign tmp4_fu_837_p2 = (state_3_read ^ state_0_read);

assign tmp5_fu_847_p2 = (cipher_q5 ^ cipher_q4);

assign tmp6_fu_853_p2 = (state_1_read ^ state_0_read);

assign tmp7_fu_863_p2 = (cipher_q7 ^ cipher_q6);

assign tmp8_fu_869_p2 = (state_2_read ^ state_1_read);

assign tmp9_fu_879_p2 = (cipher_q9 ^ cipher_q8);

assign tmp_fu_885_p2 = (state_7_read ^ state_6_read);

endmodule //MixColumns
