// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module AddRoundKey (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        p_read,
        p_read1,
        p_read2,
        p_read3,
        p_read4,
        p_read5,
        p_read6,
        p_read7,
        p_read8,
        p_read9,
        p_read10,
        p_read11,
        p_read12,
        p_read13,
        p_read14,
        p_read15,
        Nr,
        round,
        ap_return_0,
        ap_return_1,
        ap_return_2,
        ap_return_3,
        ap_return_4,
        ap_return_5,
        ap_return_6,
        ap_return_7,
        ap_return_8,
        ap_return_9,
        ap_return_10,
        ap_return_11,
        ap_return_12,
        ap_return_13,
        ap_return_14,
        ap_return_15
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_state2 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [7:0] p_read;
input  [7:0] p_read1;
input  [7:0] p_read2;
input  [7:0] p_read3;
input  [7:0] p_read4;
input  [7:0] p_read5;
input  [7:0] p_read6;
input  [7:0] p_read7;
input  [7:0] p_read8;
input  [7:0] p_read9;
input  [7:0] p_read10;
input  [7:0] p_read11;
input  [7:0] p_read12;
input  [7:0] p_read13;
input  [7:0] p_read14;
input  [7:0] p_read15;
input  [7:0] Nr;
input  [7:0] round;
output  [7:0] ap_return_0;
output  [7:0] ap_return_1;
output  [7:0] ap_return_2;
output  [7:0] ap_return_3;
output  [7:0] ap_return_4;
output  [7:0] ap_return_5;
output  [7:0] ap_return_6;
output  [7:0] ap_return_7;
output  [7:0] ap_return_8;
output  [7:0] ap_return_9;
output  [7:0] ap_return_10;
output  [7:0] ap_return_11;
output  [7:0] ap_return_12;
output  [7:0] ap_return_13;
output  [7:0] ap_return_14;
output  [7:0] ap_return_15;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[7:0] ap_return_0;
reg[7:0] ap_return_1;
reg[7:0] ap_return_2;
reg[7:0] ap_return_3;
reg[7:0] ap_return_4;
reg[7:0] ap_return_5;
reg[7:0] ap_return_6;
reg[7:0] ap_return_7;
reg[7:0] ap_return_8;
reg[7:0] ap_return_9;
reg[7:0] ap_return_10;
reg[7:0] ap_return_11;
reg[7:0] ap_return_12;
reg[7:0] ap_return_13;
reg[7:0] ap_return_14;
reg[7:0] ap_return_15;

(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [9:0] expandedKey_address0;
reg    expandedKey_ce0;
wire   [7:0] expandedKey_q0;
wire   [9:0] expandedKey_address1;
reg    expandedKey_ce1;
wire   [7:0] expandedKey_q1;
wire   [9:0] expandedKey_address2;
reg    expandedKey_ce2;
wire   [7:0] expandedKey_q2;
wire   [9:0] expandedKey_address3;
reg    expandedKey_ce3;
wire   [7:0] expandedKey_q3;
wire   [9:0] expandedKey_address4;
reg    expandedKey_ce4;
wire   [7:0] expandedKey_q4;
wire   [9:0] expandedKey_address5;
reg    expandedKey_ce5;
wire   [7:0] expandedKey_q5;
wire   [9:0] expandedKey_address6;
reg    expandedKey_ce6;
wire   [7:0] expandedKey_q6;
wire   [9:0] expandedKey_address7;
reg    expandedKey_ce7;
wire   [7:0] expandedKey_q7;
wire   [9:0] expandedKey_address8;
reg    expandedKey_ce8;
wire   [7:0] expandedKey_q8;
wire   [9:0] expandedKey_address9;
reg    expandedKey_ce9;
wire   [7:0] expandedKey_q9;
wire   [9:0] expandedKey_address10;
reg    expandedKey_ce10;
wire   [7:0] expandedKey_q10;
wire   [9:0] expandedKey_address11;
reg    expandedKey_ce11;
wire   [7:0] expandedKey_q11;
wire   [9:0] expandedKey_address12;
reg    expandedKey_ce12;
wire   [7:0] expandedKey_q12;
wire   [9:0] expandedKey_address13;
reg    expandedKey_ce13;
wire   [7:0] expandedKey_q13;
wire   [9:0] expandedKey_address14;
reg    expandedKey_ce14;
wire   [7:0] expandedKey_q14;
wire   [9:0] expandedKey_address15;
reg    expandedKey_ce15;
wire   [7:0] expandedKey_q15;
wire   [9:0] expandedKey_address16;
reg    expandedKey_ce16;
wire   [7:0] expandedKey_q16;
wire   [9:0] expandedKey_address17;
reg    expandedKey_ce17;
wire   [7:0] expandedKey_q17;
wire   [9:0] expandedKey_address18;
reg    expandedKey_ce18;
wire   [7:0] expandedKey_q18;
wire   [9:0] expandedKey_address19;
reg    expandedKey_ce19;
wire   [7:0] expandedKey_q19;
wire   [9:0] expandedKey_address20;
reg    expandedKey_ce20;
wire   [7:0] expandedKey_q20;
wire   [9:0] expandedKey_address21;
reg    expandedKey_ce21;
wire   [7:0] expandedKey_q21;
wire   [9:0] expandedKey_address22;
reg    expandedKey_ce22;
wire   [7:0] expandedKey_q22;
wire   [9:0] expandedKey_address23;
reg    expandedKey_ce23;
wire   [7:0] expandedKey_q23;
wire   [9:0] expandedKey_address24;
reg    expandedKey_ce24;
wire   [7:0] expandedKey_q24;
wire   [9:0] expandedKey_address25;
reg    expandedKey_ce25;
wire   [7:0] expandedKey_q25;
wire   [9:0] expandedKey_address26;
reg    expandedKey_ce26;
wire   [7:0] expandedKey_q26;
wire   [9:0] expandedKey_address27;
reg    expandedKey_ce27;
wire   [7:0] expandedKey_q27;
wire   [9:0] expandedKey_address28;
reg    expandedKey_ce28;
wire   [7:0] expandedKey_q28;
wire   [9:0] expandedKey_address29;
reg    expandedKey_ce29;
wire   [7:0] expandedKey_q29;
wire   [9:0] expandedKey_address30;
reg    expandedKey_ce30;
wire   [7:0] expandedKey_q30;
wire   [9:0] expandedKey_address31;
reg    expandedKey_ce31;
wire   [7:0] expandedKey_q31;
wire   [0:0] sel_tmp_fu_1157_p2;
reg   [0:0] sel_tmp_reg_1825;
wire   [0:0] or_cond_fu_1188_p2;
reg   [0:0] or_cond_reg_1850;
wire  signed [63:0] addr63_cast_fu_987_p1;
wire   [63:0] addr65_cast_fu_998_p1;
wire   [63:0] addr67_cast_fu_1009_p1;
wire   [63:0] addr69_cast_fu_1020_p1;
wire   [63:0] addr71_cast_fu_1031_p1;
wire   [63:0] addr73_cast_fu_1042_p1;
wire   [63:0] addr75_cast_fu_1053_p1;
wire   [63:0] addr77_cast_fu_1064_p1;
wire   [63:0] addr79_cast_fu_1075_p1;
wire   [63:0] addr81_cast_fu_1086_p1;
wire   [63:0] addr83_cast_fu_1097_p1;
wire   [63:0] addr85_cast_fu_1108_p1;
wire   [63:0] addr87_cast_fu_1119_p1;
wire   [63:0] addr89_cast_fu_1130_p1;
wire   [63:0] addr91_cast_fu_1141_p1;
wire   [63:0] addr93_cast_fu_1152_p1;
wire   [63:0] newSel_cast_fu_1183_p1;
wire   [63:0] newSel3_fu_1194_p3;
wire   [63:0] newSel6_fu_1203_p3;
wire   [63:0] newSel9_fu_1212_p3;
wire   [63:0] newSel12_fu_1221_p3;
wire   [63:0] newSel15_fu_1230_p3;
wire   [63:0] newSel18_fu_1239_p3;
wire   [63:0] newSel21_fu_1248_p3;
wire   [63:0] newSel24_fu_1257_p3;
wire   [63:0] newSel27_fu_1266_p3;
wire   [63:0] newSel30_fu_1275_p3;
wire   [63:0] newSel33_fu_1284_p3;
wire   [63:0] newSel36_fu_1293_p3;
wire   [63:0] newSel39_fu_1302_p3;
wire   [63:0] newSel42_fu_1311_p3;
wire   [63:0] newSel45_fu_1320_p3;
wire    ap_CS_fsm_state2;
wire   [6:0] tmp_32_fu_599_p1;
wire   [11:0] tmp_fu_591_p3;
wire   [11:0] tmp_s_fu_615_p2;
wire   [11:0] tmp_2_fu_633_p2;
wire   [11:0] tmp_4_fu_651_p2;
wire   [11:0] tmp_6_fu_669_p2;
wire   [11:0] tmp_8_fu_687_p2;
wire   [11:0] tmp_10_fu_705_p2;
wire   [11:0] tmp_12_fu_723_p2;
wire   [11:0] tmp_14_fu_741_p2;
wire   [11:0] tmp_16_fu_759_p2;
wire   [11:0] tmp_18_fu_777_p2;
wire   [11:0] tmp_20_fu_795_p2;
wire   [11:0] tmp_22_fu_813_p2;
wire   [11:0] tmp_24_fu_831_p2;
wire   [11:0] tmp_26_fu_849_p2;
wire   [11:0] tmp_28_fu_867_p2;
wire   [12:0] tmp_32_cast1_fu_611_p1;
wire   [63:0] tmp_1_fu_625_p3;
wire   [63:0] tmp_3_fu_643_p3;
wire   [63:0] tmp_5_fu_661_p3;
wire   [63:0] tmp_7_fu_679_p3;
wire   [63:0] tmp_9_fu_697_p3;
wire   [63:0] tmp_11_fu_715_p3;
wire   [63:0] tmp_13_fu_733_p3;
wire   [63:0] tmp_15_fu_751_p3;
wire   [63:0] tmp_17_fu_769_p3;
wire   [63:0] tmp_19_fu_787_p3;
wire   [63:0] tmp_21_fu_805_p3;
wire   [63:0] tmp_23_fu_823_p3;
wire   [63:0] tmp_25_fu_841_p3;
wire   [63:0] tmp_27_fu_859_p3;
wire   [63:0] tmp_29_fu_877_p3;
wire   [10:0] tmp_32_cast_fu_603_p3;
wire   [10:0] addr63_fu_981_p2;
wire   [10:0] tmp_33_fu_621_p1;
wire   [10:0] addr65_fu_992_p2;
wire   [10:0] tmp_34_fu_639_p1;
wire   [10:0] addr67_fu_1003_p2;
wire   [10:0] tmp_35_fu_657_p1;
wire   [10:0] addr69_fu_1014_p2;
wire   [10:0] tmp_36_fu_675_p1;
wire   [10:0] addr71_fu_1025_p2;
wire   [10:0] tmp_37_fu_693_p1;
wire   [10:0] addr73_fu_1036_p2;
wire   [10:0] tmp_38_fu_711_p1;
wire   [10:0] addr75_fu_1047_p2;
wire   [10:0] tmp_39_fu_729_p1;
wire   [10:0] addr77_fu_1058_p2;
wire   [10:0] tmp_40_fu_747_p1;
wire   [10:0] addr79_fu_1069_p2;
wire   [10:0] tmp_41_fu_765_p1;
wire   [10:0] addr81_fu_1080_p2;
wire   [10:0] tmp_42_fu_783_p1;
wire   [10:0] addr83_fu_1091_p2;
wire   [10:0] tmp_43_fu_801_p1;
wire   [10:0] addr85_fu_1102_p2;
wire   [10:0] tmp_44_fu_819_p1;
wire   [10:0] addr87_fu_1113_p2;
wire   [10:0] tmp_45_fu_837_p1;
wire   [10:0] addr89_fu_1124_p2;
wire   [10:0] tmp_46_fu_855_p1;
wire   [10:0] addr91_fu_1135_p2;
wire   [10:0] tmp_47_fu_873_p1;
wire   [10:0] addr93_fu_1146_p2;
wire   [0:0] sel_tmp4_fu_1169_p2;
wire   [12:0] addr31_fu_885_p2;
wire   [12:0] newSel_fu_1175_p3;
wire   [0:0] sel_tmp2_fu_1163_p2;
wire   [63:0] addr33_fu_891_p2;
wire   [63:0] addr35_fu_897_p2;
wire   [63:0] addr37_fu_903_p2;
wire   [63:0] addr39_fu_909_p2;
wire   [63:0] addr41_fu_915_p2;
wire   [63:0] addr43_fu_921_p2;
wire   [63:0] addr45_fu_927_p2;
wire   [63:0] addr47_fu_933_p2;
wire   [63:0] addr49_fu_939_p2;
wire   [63:0] addr51_fu_945_p2;
wire   [63:0] addr53_fu_951_p2;
wire   [63:0] addr55_fu_957_p2;
wire   [63:0] addr57_fu_963_p2;
wire   [63:0] addr59_fu_969_p2;
wire   [63:0] addr61_fu_975_p2;
wire   [7:0] newSel1_fu_1329_p3;
wire   [7:0] newSel2_fu_1336_p3;
wire   [7:0] newSel4_fu_1349_p3;
wire   [7:0] newSel5_fu_1356_p3;
wire   [7:0] newSel7_fu_1369_p3;
wire   [7:0] newSel8_fu_1376_p3;
wire   [7:0] newSel10_fu_1389_p3;
wire   [7:0] newSel11_fu_1396_p3;
wire   [7:0] newSel13_fu_1409_p3;
wire   [7:0] newSel14_fu_1416_p3;
wire   [7:0] newSel16_fu_1429_p3;
wire   [7:0] newSel17_fu_1436_p3;
wire   [7:0] newSel19_fu_1449_p3;
wire   [7:0] newSel20_fu_1456_p3;
wire   [7:0] newSel22_fu_1469_p3;
wire   [7:0] newSel23_fu_1476_p3;
wire   [7:0] newSel25_fu_1489_p3;
wire   [7:0] newSel26_fu_1496_p3;
wire   [7:0] newSel28_fu_1509_p3;
wire   [7:0] newSel29_fu_1516_p3;
wire   [7:0] newSel31_fu_1529_p3;
wire   [7:0] newSel32_fu_1536_p3;
wire   [7:0] newSel34_fu_1549_p3;
wire   [7:0] newSel35_fu_1556_p3;
wire   [7:0] newSel37_fu_1569_p3;
wire   [7:0] newSel38_fu_1576_p3;
wire   [7:0] newSel40_fu_1589_p3;
wire   [7:0] newSel41_fu_1596_p3;
wire   [7:0] newSel43_fu_1609_p3;
wire   [7:0] newSel44_fu_1616_p3;
wire   [7:0] newSel46_fu_1629_p3;
wire   [7:0] newSel47_fu_1636_p3;
wire   [7:0] state_fu_1343_p2;
wire   [7:0] state_1_fu_1363_p2;
wire   [7:0] state_2_fu_1383_p2;
wire   [7:0] state_3_fu_1403_p2;
wire   [7:0] state_4_fu_1423_p2;
wire   [7:0] state_5_fu_1443_p2;
wire   [7:0] state_6_fu_1463_p2;
wire   [7:0] state_7_fu_1483_p2;
wire   [7:0] state_8_fu_1503_p2;
wire   [7:0] state_9_fu_1523_p2;
wire   [7:0] state_10_fu_1543_p2;
wire   [7:0] state_11_fu_1563_p2;
wire   [7:0] state_s_fu_1583_p2;
wire   [7:0] state_13_fu_1603_p2;
wire   [7:0] state_14_fu_1623_p2;
wire   [7:0] state_15_fu_1643_p2;
reg   [7:0] ap_return_0_preg;
reg   [7:0] ap_return_1_preg;
reg   [7:0] ap_return_2_preg;
reg   [7:0] ap_return_3_preg;
reg   [7:0] ap_return_4_preg;
reg   [7:0] ap_return_5_preg;
reg   [7:0] ap_return_6_preg;
reg   [7:0] ap_return_7_preg;
reg   [7:0] ap_return_8_preg;
reg   [7:0] ap_return_9_preg;
reg   [7:0] ap_return_10_preg;
reg   [7:0] ap_return_11_preg;
reg   [7:0] ap_return_12_preg;
reg   [7:0] ap_return_13_preg;
reg   [7:0] ap_return_14_preg;
reg   [7:0] ap_return_15_preg;
reg   [1:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
#0 ap_return_0_preg = 8'd0;
#0 ap_return_1_preg = 8'd0;
#0 ap_return_2_preg = 8'd0;
#0 ap_return_3_preg = 8'd0;
#0 ap_return_4_preg = 8'd0;
#0 ap_return_5_preg = 8'd0;
#0 ap_return_6_preg = 8'd0;
#0 ap_return_7_preg = 8'd0;
#0 ap_return_8_preg = 8'd0;
#0 ap_return_9_preg = 8'd0;
#0 ap_return_10_preg = 8'd0;
#0 ap_return_11_preg = 8'd0;
#0 ap_return_12_preg = 8'd0;
#0 ap_return_13_preg = 8'd0;
#0 ap_return_14_preg = 8'd0;
#0 ap_return_15_preg = 8'd0;
end

AddRoundKey_expanbkb #(
    .DataWidth( 8 ),
    .AddressRange( 624 ),
    .AddressWidth( 10 ))
expandedKey_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(expandedKey_address0),
    .ce0(expandedKey_ce0),
    .q0(expandedKey_q0),
    .address1(expandedKey_address1),
    .ce1(expandedKey_ce1),
    .q1(expandedKey_q1),
    .address2(expandedKey_address2),
    .ce2(expandedKey_ce2),
    .q2(expandedKey_q2),
    .address3(expandedKey_address3),
    .ce3(expandedKey_ce3),
    .q3(expandedKey_q3),
    .address4(expandedKey_address4),
    .ce4(expandedKey_ce4),
    .q4(expandedKey_q4),
    .address5(expandedKey_address5),
    .ce5(expandedKey_ce5),
    .q5(expandedKey_q5),
    .address6(expandedKey_address6),
    .ce6(expandedKey_ce6),
    .q6(expandedKey_q6),
    .address7(expandedKey_address7),
    .ce7(expandedKey_ce7),
    .q7(expandedKey_q7),
    .address8(expandedKey_address8),
    .ce8(expandedKey_ce8),
    .q8(expandedKey_q8),
    .address9(expandedKey_address9),
    .ce9(expandedKey_ce9),
    .q9(expandedKey_q9),
    .address10(expandedKey_address10),
    .ce10(expandedKey_ce10),
    .q10(expandedKey_q10),
    .address11(expandedKey_address11),
    .ce11(expandedKey_ce11),
    .q11(expandedKey_q11),
    .address12(expandedKey_address12),
    .ce12(expandedKey_ce12),
    .q12(expandedKey_q12),
    .address13(expandedKey_address13),
    .ce13(expandedKey_ce13),
    .q13(expandedKey_q13),
    .address14(expandedKey_address14),
    .ce14(expandedKey_ce14),
    .q14(expandedKey_q14),
    .address15(expandedKey_address15),
    .ce15(expandedKey_ce15),
    .q15(expandedKey_q15),
    .address16(expandedKey_address16),
    .ce16(expandedKey_ce16),
    .q16(expandedKey_q16),
    .address17(expandedKey_address17),
    .ce17(expandedKey_ce17),
    .q17(expandedKey_q17),
    .address18(expandedKey_address18),
    .ce18(expandedKey_ce18),
    .q18(expandedKey_q18),
    .address19(expandedKey_address19),
    .ce19(expandedKey_ce19),
    .q19(expandedKey_q19),
    .address20(expandedKey_address20),
    .ce20(expandedKey_ce20),
    .q20(expandedKey_q20),
    .address21(expandedKey_address21),
    .ce21(expandedKey_ce21),
    .q21(expandedKey_q21),
    .address22(expandedKey_address22),
    .ce22(expandedKey_ce22),
    .q22(expandedKey_q22),
    .address23(expandedKey_address23),
    .ce23(expandedKey_ce23),
    .q23(expandedKey_q23),
    .address24(expandedKey_address24),
    .ce24(expandedKey_ce24),
    .q24(expandedKey_q24),
    .address25(expandedKey_address25),
    .ce25(expandedKey_ce25),
    .q25(expandedKey_q25),
    .address26(expandedKey_address26),
    .ce26(expandedKey_ce26),
    .q26(expandedKey_q26),
    .address27(expandedKey_address27),
    .ce27(expandedKey_ce27),
    .q27(expandedKey_q27),
    .address28(expandedKey_address28),
    .ce28(expandedKey_ce28),
    .q28(expandedKey_q28),
    .address29(expandedKey_address29),
    .ce29(expandedKey_ce29),
    .q29(expandedKey_q29),
    .address30(expandedKey_address30),
    .ce30(expandedKey_ce30),
    .q30(expandedKey_q30),
    .address31(expandedKey_address31),
    .ce31(expandedKey_ce31),
    .q31(expandedKey_q31)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_0_preg <= 8'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state2)) begin
            ap_return_0_preg <= state_fu_1343_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_10_preg <= 8'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state2)) begin
            ap_return_10_preg <= state_10_fu_1543_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_11_preg <= 8'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state2)) begin
            ap_return_11_preg <= state_11_fu_1563_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_12_preg <= 8'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state2)) begin
            ap_return_12_preg <= state_s_fu_1583_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_13_preg <= 8'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state2)) begin
            ap_return_13_preg <= state_13_fu_1603_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_14_preg <= 8'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state2)) begin
            ap_return_14_preg <= state_14_fu_1623_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_15_preg <= 8'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state2)) begin
            ap_return_15_preg <= state_15_fu_1643_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_1_preg <= 8'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state2)) begin
            ap_return_1_preg <= state_1_fu_1363_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_2_preg <= 8'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state2)) begin
            ap_return_2_preg <= state_2_fu_1383_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_3_preg <= 8'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state2)) begin
            ap_return_3_preg <= state_3_fu_1403_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_4_preg <= 8'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state2)) begin
            ap_return_4_preg <= state_4_fu_1423_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_5_preg <= 8'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state2)) begin
            ap_return_5_preg <= state_5_fu_1443_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_6_preg <= 8'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state2)) begin
            ap_return_6_preg <= state_6_fu_1463_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_7_preg <= 8'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state2)) begin
            ap_return_7_preg <= state_7_fu_1483_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_8_preg <= 8'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state2)) begin
            ap_return_8_preg <= state_8_fu_1503_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_9_preg <= 8'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state2)) begin
            ap_return_9_preg <= state_9_fu_1523_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        or_cond_reg_1850 <= or_cond_fu_1188_p2;
        sel_tmp_reg_1825 <= sel_tmp_fu_1157_p2;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ap_return_0 = state_fu_1343_p2;
    end else begin
        ap_return_0 = ap_return_0_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ap_return_1 = state_1_fu_1363_p2;
    end else begin
        ap_return_1 = ap_return_1_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ap_return_10 = state_10_fu_1543_p2;
    end else begin
        ap_return_10 = ap_return_10_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ap_return_11 = state_11_fu_1563_p2;
    end else begin
        ap_return_11 = ap_return_11_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ap_return_12 = state_s_fu_1583_p2;
    end else begin
        ap_return_12 = ap_return_12_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ap_return_13 = state_13_fu_1603_p2;
    end else begin
        ap_return_13 = ap_return_13_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ap_return_14 = state_14_fu_1623_p2;
    end else begin
        ap_return_14 = ap_return_14_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ap_return_15 = state_15_fu_1643_p2;
    end else begin
        ap_return_15 = ap_return_15_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ap_return_2 = state_2_fu_1383_p2;
    end else begin
        ap_return_2 = ap_return_2_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ap_return_3 = state_3_fu_1403_p2;
    end else begin
        ap_return_3 = ap_return_3_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ap_return_4 = state_4_fu_1423_p2;
    end else begin
        ap_return_4 = ap_return_4_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ap_return_5 = state_5_fu_1443_p2;
    end else begin
        ap_return_5 = ap_return_5_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ap_return_6 = state_6_fu_1463_p2;
    end else begin
        ap_return_6 = ap_return_6_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ap_return_7 = state_7_fu_1483_p2;
    end else begin
        ap_return_7 = ap_return_7_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ap_return_8 = state_8_fu_1503_p2;
    end else begin
        ap_return_8 = ap_return_8_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ap_return_9 = state_9_fu_1523_p2;
    end else begin
        ap_return_9 = ap_return_9_preg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        expandedKey_ce0 = 1'b1;
    end else begin
        expandedKey_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        expandedKey_ce1 = 1'b1;
    end else begin
        expandedKey_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        expandedKey_ce10 = 1'b1;
    end else begin
        expandedKey_ce10 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        expandedKey_ce11 = 1'b1;
    end else begin
        expandedKey_ce11 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        expandedKey_ce12 = 1'b1;
    end else begin
        expandedKey_ce12 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        expandedKey_ce13 = 1'b1;
    end else begin
        expandedKey_ce13 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        expandedKey_ce14 = 1'b1;
    end else begin
        expandedKey_ce14 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        expandedKey_ce15 = 1'b1;
    end else begin
        expandedKey_ce15 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        expandedKey_ce16 = 1'b1;
    end else begin
        expandedKey_ce16 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        expandedKey_ce17 = 1'b1;
    end else begin
        expandedKey_ce17 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        expandedKey_ce18 = 1'b1;
    end else begin
        expandedKey_ce18 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        expandedKey_ce19 = 1'b1;
    end else begin
        expandedKey_ce19 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        expandedKey_ce2 = 1'b1;
    end else begin
        expandedKey_ce2 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        expandedKey_ce20 = 1'b1;
    end else begin
        expandedKey_ce20 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        expandedKey_ce21 = 1'b1;
    end else begin
        expandedKey_ce21 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        expandedKey_ce22 = 1'b1;
    end else begin
        expandedKey_ce22 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        expandedKey_ce23 = 1'b1;
    end else begin
        expandedKey_ce23 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        expandedKey_ce24 = 1'b1;
    end else begin
        expandedKey_ce24 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        expandedKey_ce25 = 1'b1;
    end else begin
        expandedKey_ce25 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        expandedKey_ce26 = 1'b1;
    end else begin
        expandedKey_ce26 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        expandedKey_ce27 = 1'b1;
    end else begin
        expandedKey_ce27 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        expandedKey_ce28 = 1'b1;
    end else begin
        expandedKey_ce28 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        expandedKey_ce29 = 1'b1;
    end else begin
        expandedKey_ce29 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        expandedKey_ce3 = 1'b1;
    end else begin
        expandedKey_ce3 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        expandedKey_ce30 = 1'b1;
    end else begin
        expandedKey_ce30 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        expandedKey_ce31 = 1'b1;
    end else begin
        expandedKey_ce31 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        expandedKey_ce4 = 1'b1;
    end else begin
        expandedKey_ce4 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        expandedKey_ce5 = 1'b1;
    end else begin
        expandedKey_ce5 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        expandedKey_ce6 = 1'b1;
    end else begin
        expandedKey_ce6 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        expandedKey_ce7 = 1'b1;
    end else begin
        expandedKey_ce7 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        expandedKey_ce8 = 1'b1;
    end else begin
        expandedKey_ce8 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        expandedKey_ce9 = 1'b1;
    end else begin
        expandedKey_ce9 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign addr31_fu_885_p2 = (13'd176 + tmp_32_cast1_fu_611_p1);

assign addr33_fu_891_p2 = (64'd176 + tmp_1_fu_625_p3);

assign addr35_fu_897_p2 = (64'd176 + tmp_3_fu_643_p3);

assign addr37_fu_903_p2 = (64'd176 + tmp_5_fu_661_p3);

assign addr39_fu_909_p2 = (64'd176 + tmp_7_fu_679_p3);

assign addr41_fu_915_p2 = (64'd176 + tmp_9_fu_697_p3);

assign addr43_fu_921_p2 = (64'd176 + tmp_11_fu_715_p3);

assign addr45_fu_927_p2 = (64'd176 + tmp_13_fu_733_p3);

assign addr47_fu_933_p2 = (64'd176 + tmp_15_fu_751_p3);

assign addr49_fu_939_p2 = (64'd176 + tmp_17_fu_769_p3);

assign addr51_fu_945_p2 = (64'd176 + tmp_19_fu_787_p3);

assign addr53_fu_951_p2 = (64'd176 + tmp_21_fu_805_p3);

assign addr55_fu_957_p2 = (64'd176 + tmp_23_fu_823_p3);

assign addr57_fu_963_p2 = (64'd176 + tmp_25_fu_841_p3);

assign addr59_fu_969_p2 = (64'd176 + tmp_27_fu_859_p3);

assign addr61_fu_975_p2 = (64'd176 + tmp_29_fu_877_p3);

assign addr63_cast_fu_987_p1 = $signed(addr63_fu_981_p2);

assign addr63_fu_981_p2 = (11'd384 + tmp_32_cast_fu_603_p3);

assign addr65_cast_fu_998_p1 = addr65_fu_992_p2;

assign addr65_fu_992_p2 = (11'd384 + tmp_33_fu_621_p1);

assign addr67_cast_fu_1009_p1 = addr67_fu_1003_p2;

assign addr67_fu_1003_p2 = (11'd384 + tmp_34_fu_639_p1);

assign addr69_cast_fu_1020_p1 = addr69_fu_1014_p2;

assign addr69_fu_1014_p2 = (11'd384 + tmp_35_fu_657_p1);

assign addr71_cast_fu_1031_p1 = addr71_fu_1025_p2;

assign addr71_fu_1025_p2 = (11'd384 + tmp_36_fu_675_p1);

assign addr73_cast_fu_1042_p1 = addr73_fu_1036_p2;

assign addr73_fu_1036_p2 = (11'd384 + tmp_37_fu_693_p1);

assign addr75_cast_fu_1053_p1 = addr75_fu_1047_p2;

assign addr75_fu_1047_p2 = (11'd384 + tmp_38_fu_711_p1);

assign addr77_cast_fu_1064_p1 = addr77_fu_1058_p2;

assign addr77_fu_1058_p2 = (11'd384 + tmp_39_fu_729_p1);

assign addr79_cast_fu_1075_p1 = addr79_fu_1069_p2;

assign addr79_fu_1069_p2 = (11'd384 + tmp_40_fu_747_p1);

assign addr81_cast_fu_1086_p1 = addr81_fu_1080_p2;

assign addr81_fu_1080_p2 = (11'd384 + tmp_41_fu_765_p1);

assign addr83_cast_fu_1097_p1 = addr83_fu_1091_p2;

assign addr83_fu_1091_p2 = (11'd384 + tmp_42_fu_783_p1);

assign addr85_cast_fu_1108_p1 = addr85_fu_1102_p2;

assign addr85_fu_1102_p2 = (11'd384 + tmp_43_fu_801_p1);

assign addr87_cast_fu_1119_p1 = addr87_fu_1113_p2;

assign addr87_fu_1113_p2 = (11'd384 + tmp_44_fu_819_p1);

assign addr89_cast_fu_1130_p1 = addr89_fu_1124_p2;

assign addr89_fu_1124_p2 = (11'd384 + tmp_45_fu_837_p1);

assign addr91_cast_fu_1141_p1 = addr91_fu_1135_p2;

assign addr91_fu_1135_p2 = (11'd384 + tmp_46_fu_855_p1);

assign addr93_cast_fu_1152_p1 = addr93_fu_1146_p2;

assign addr93_fu_1146_p2 = (11'd384 + tmp_47_fu_873_p1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign expandedKey_address0 = addr63_cast_fu_987_p1;

assign expandedKey_address1 = newSel_cast_fu_1183_p1;

assign expandedKey_address10 = addr73_cast_fu_1042_p1;

assign expandedKey_address11 = newSel15_fu_1230_p3;

assign expandedKey_address12 = addr75_cast_fu_1053_p1;

assign expandedKey_address13 = newSel18_fu_1239_p3;

assign expandedKey_address14 = addr77_cast_fu_1064_p1;

assign expandedKey_address15 = newSel21_fu_1248_p3;

assign expandedKey_address16 = addr79_cast_fu_1075_p1;

assign expandedKey_address17 = newSel24_fu_1257_p3;

assign expandedKey_address18 = addr81_cast_fu_1086_p1;

assign expandedKey_address19 = newSel27_fu_1266_p3;

assign expandedKey_address2 = addr65_cast_fu_998_p1;

assign expandedKey_address20 = addr83_cast_fu_1097_p1;

assign expandedKey_address21 = newSel30_fu_1275_p3;

assign expandedKey_address22 = addr85_cast_fu_1108_p1;

assign expandedKey_address23 = newSel33_fu_1284_p3;

assign expandedKey_address24 = addr87_cast_fu_1119_p1;

assign expandedKey_address25 = newSel36_fu_1293_p3;

assign expandedKey_address26 = addr89_cast_fu_1130_p1;

assign expandedKey_address27 = newSel39_fu_1302_p3;

assign expandedKey_address28 = addr91_cast_fu_1141_p1;

assign expandedKey_address29 = newSel42_fu_1311_p3;

assign expandedKey_address3 = newSel3_fu_1194_p3;

assign expandedKey_address30 = addr93_cast_fu_1152_p1;

assign expandedKey_address31 = newSel45_fu_1320_p3;

assign expandedKey_address4 = addr67_cast_fu_1009_p1;

assign expandedKey_address5 = newSel6_fu_1203_p3;

assign expandedKey_address6 = addr69_cast_fu_1020_p1;

assign expandedKey_address7 = newSel9_fu_1212_p3;

assign expandedKey_address8 = addr71_cast_fu_1031_p1;

assign expandedKey_address9 = newSel12_fu_1221_p3;

assign newSel10_fu_1389_p3 = ((sel_tmp_reg_1825[0:0] === 1'b1) ? expandedKey_q6 : 8'd0);

assign newSel11_fu_1396_p3 = ((or_cond_reg_1850[0:0] === 1'b1) ? expandedKey_q7 : newSel10_fu_1389_p3);

assign newSel12_fu_1221_p3 = ((sel_tmp4_fu_1169_p2[0:0] === 1'b1) ? tmp_7_fu_679_p3 : addr39_fu_909_p2);

assign newSel13_fu_1409_p3 = ((sel_tmp_reg_1825[0:0] === 1'b1) ? expandedKey_q8 : 8'd0);

assign newSel14_fu_1416_p3 = ((or_cond_reg_1850[0:0] === 1'b1) ? expandedKey_q9 : newSel13_fu_1409_p3);

assign newSel15_fu_1230_p3 = ((sel_tmp4_fu_1169_p2[0:0] === 1'b1) ? tmp_9_fu_697_p3 : addr41_fu_915_p2);

assign newSel16_fu_1429_p3 = ((sel_tmp_reg_1825[0:0] === 1'b1) ? expandedKey_q10 : 8'd0);

assign newSel17_fu_1436_p3 = ((or_cond_reg_1850[0:0] === 1'b1) ? expandedKey_q11 : newSel16_fu_1429_p3);

assign newSel18_fu_1239_p3 = ((sel_tmp4_fu_1169_p2[0:0] === 1'b1) ? tmp_11_fu_715_p3 : addr43_fu_921_p2);

assign newSel19_fu_1449_p3 = ((sel_tmp_reg_1825[0:0] === 1'b1) ? expandedKey_q12 : 8'd0);

assign newSel1_fu_1329_p3 = ((sel_tmp_reg_1825[0:0] === 1'b1) ? expandedKey_q0 : 8'd0);

assign newSel20_fu_1456_p3 = ((or_cond_reg_1850[0:0] === 1'b1) ? expandedKey_q13 : newSel19_fu_1449_p3);

assign newSel21_fu_1248_p3 = ((sel_tmp4_fu_1169_p2[0:0] === 1'b1) ? tmp_13_fu_733_p3 : addr45_fu_927_p2);

assign newSel22_fu_1469_p3 = ((sel_tmp_reg_1825[0:0] === 1'b1) ? expandedKey_q14 : 8'd0);

assign newSel23_fu_1476_p3 = ((or_cond_reg_1850[0:0] === 1'b1) ? expandedKey_q15 : newSel22_fu_1469_p3);

assign newSel24_fu_1257_p3 = ((sel_tmp4_fu_1169_p2[0:0] === 1'b1) ? tmp_15_fu_751_p3 : addr47_fu_933_p2);

assign newSel25_fu_1489_p3 = ((sel_tmp_reg_1825[0:0] === 1'b1) ? expandedKey_q16 : 8'd0);

assign newSel26_fu_1496_p3 = ((or_cond_reg_1850[0:0] === 1'b1) ? expandedKey_q17 : newSel25_fu_1489_p3);

assign newSel27_fu_1266_p3 = ((sel_tmp4_fu_1169_p2[0:0] === 1'b1) ? tmp_17_fu_769_p3 : addr49_fu_939_p2);

assign newSel28_fu_1509_p3 = ((sel_tmp_reg_1825[0:0] === 1'b1) ? expandedKey_q18 : 8'd0);

assign newSel29_fu_1516_p3 = ((or_cond_reg_1850[0:0] === 1'b1) ? expandedKey_q19 : newSel28_fu_1509_p3);

assign newSel2_fu_1336_p3 = ((or_cond_reg_1850[0:0] === 1'b1) ? expandedKey_q1 : newSel1_fu_1329_p3);

assign newSel30_fu_1275_p3 = ((sel_tmp4_fu_1169_p2[0:0] === 1'b1) ? tmp_19_fu_787_p3 : addr51_fu_945_p2);

assign newSel31_fu_1529_p3 = ((sel_tmp_reg_1825[0:0] === 1'b1) ? expandedKey_q20 : 8'd0);

assign newSel32_fu_1536_p3 = ((or_cond_reg_1850[0:0] === 1'b1) ? expandedKey_q21 : newSel31_fu_1529_p3);

assign newSel33_fu_1284_p3 = ((sel_tmp4_fu_1169_p2[0:0] === 1'b1) ? tmp_21_fu_805_p3 : addr53_fu_951_p2);

assign newSel34_fu_1549_p3 = ((sel_tmp_reg_1825[0:0] === 1'b1) ? expandedKey_q22 : 8'd0);

assign newSel35_fu_1556_p3 = ((or_cond_reg_1850[0:0] === 1'b1) ? expandedKey_q23 : newSel34_fu_1549_p3);

assign newSel36_fu_1293_p3 = ((sel_tmp4_fu_1169_p2[0:0] === 1'b1) ? tmp_23_fu_823_p3 : addr55_fu_957_p2);

assign newSel37_fu_1569_p3 = ((sel_tmp_reg_1825[0:0] === 1'b1) ? expandedKey_q24 : 8'd0);

assign newSel38_fu_1576_p3 = ((or_cond_reg_1850[0:0] === 1'b1) ? expandedKey_q25 : newSel37_fu_1569_p3);

assign newSel39_fu_1302_p3 = ((sel_tmp4_fu_1169_p2[0:0] === 1'b1) ? tmp_25_fu_841_p3 : addr57_fu_963_p2);

assign newSel3_fu_1194_p3 = ((sel_tmp4_fu_1169_p2[0:0] === 1'b1) ? tmp_1_fu_625_p3 : addr33_fu_891_p2);

assign newSel40_fu_1589_p3 = ((sel_tmp_reg_1825[0:0] === 1'b1) ? expandedKey_q26 : 8'd0);

assign newSel41_fu_1596_p3 = ((or_cond_reg_1850[0:0] === 1'b1) ? expandedKey_q27 : newSel40_fu_1589_p3);

assign newSel42_fu_1311_p3 = ((sel_tmp4_fu_1169_p2[0:0] === 1'b1) ? tmp_27_fu_859_p3 : addr59_fu_969_p2);

assign newSel43_fu_1609_p3 = ((sel_tmp_reg_1825[0:0] === 1'b1) ? expandedKey_q28 : 8'd0);

assign newSel44_fu_1616_p3 = ((or_cond_reg_1850[0:0] === 1'b1) ? expandedKey_q29 : newSel43_fu_1609_p3);

assign newSel45_fu_1320_p3 = ((sel_tmp4_fu_1169_p2[0:0] === 1'b1) ? tmp_29_fu_877_p3 : addr61_fu_975_p2);

assign newSel46_fu_1629_p3 = ((sel_tmp_reg_1825[0:0] === 1'b1) ? expandedKey_q30 : 8'd0);

assign newSel47_fu_1636_p3 = ((or_cond_reg_1850[0:0] === 1'b1) ? expandedKey_q31 : newSel46_fu_1629_p3);

assign newSel4_fu_1349_p3 = ((sel_tmp_reg_1825[0:0] === 1'b1) ? expandedKey_q2 : 8'd0);

assign newSel5_fu_1356_p3 = ((or_cond_reg_1850[0:0] === 1'b1) ? expandedKey_q3 : newSel4_fu_1349_p3);

assign newSel6_fu_1203_p3 = ((sel_tmp4_fu_1169_p2[0:0] === 1'b1) ? tmp_3_fu_643_p3 : addr35_fu_897_p2);

assign newSel7_fu_1369_p3 = ((sel_tmp_reg_1825[0:0] === 1'b1) ? expandedKey_q4 : 8'd0);

assign newSel8_fu_1376_p3 = ((or_cond_reg_1850[0:0] === 1'b1) ? expandedKey_q5 : newSel7_fu_1369_p3);

assign newSel9_fu_1212_p3 = ((sel_tmp4_fu_1169_p2[0:0] === 1'b1) ? tmp_5_fu_661_p3 : addr37_fu_903_p2);

assign newSel_cast_fu_1183_p1 = newSel_fu_1175_p3;

assign newSel_fu_1175_p3 = ((sel_tmp4_fu_1169_p2[0:0] === 1'b1) ? tmp_32_cast1_fu_611_p1 : addr31_fu_885_p2);

assign or_cond_fu_1188_p2 = (sel_tmp4_fu_1169_p2 | sel_tmp2_fu_1163_p2);

assign sel_tmp2_fu_1163_p2 = ((Nr == 8'd12) ? 1'b1 : 1'b0);

assign sel_tmp4_fu_1169_p2 = ((Nr == 8'd10) ? 1'b1 : 1'b0);

assign sel_tmp_fu_1157_p2 = ((Nr == 8'd14) ? 1'b1 : 1'b0);

assign state_10_fu_1543_p2 = (p_read10 ^ newSel32_fu_1536_p3);

assign state_11_fu_1563_p2 = (p_read11 ^ newSel35_fu_1556_p3);

assign state_13_fu_1603_p2 = (p_read13 ^ newSel41_fu_1596_p3);

assign state_14_fu_1623_p2 = (p_read14 ^ newSel44_fu_1616_p3);

assign state_15_fu_1643_p2 = (p_read15 ^ newSel47_fu_1636_p3);

assign state_1_fu_1363_p2 = (p_read1 ^ newSel5_fu_1356_p3);

assign state_2_fu_1383_p2 = (p_read2 ^ newSel8_fu_1376_p3);

assign state_3_fu_1403_p2 = (p_read3 ^ newSel11_fu_1396_p3);

assign state_4_fu_1423_p2 = (p_read4 ^ newSel14_fu_1416_p3);

assign state_5_fu_1443_p2 = (p_read5 ^ newSel17_fu_1436_p3);

assign state_6_fu_1463_p2 = (p_read6 ^ newSel20_fu_1456_p3);

assign state_7_fu_1483_p2 = (p_read7 ^ newSel23_fu_1476_p3);

assign state_8_fu_1503_p2 = (p_read8 ^ newSel26_fu_1496_p3);

assign state_9_fu_1523_p2 = (p_read9 ^ newSel29_fu_1516_p3);

assign state_fu_1343_p2 = (p_read ^ newSel2_fu_1336_p3);

assign state_s_fu_1583_p2 = (p_read12 ^ newSel38_fu_1576_p3);

assign tmp_10_fu_705_p2 = (tmp_fu_591_p3 | 12'd6);

assign tmp_11_fu_715_p3 = {{52'd0}, {tmp_10_fu_705_p2}};

assign tmp_12_fu_723_p2 = (tmp_fu_591_p3 | 12'd7);

assign tmp_13_fu_733_p3 = {{52'd0}, {tmp_12_fu_723_p2}};

assign tmp_14_fu_741_p2 = (tmp_fu_591_p3 | 12'd8);

assign tmp_15_fu_751_p3 = {{52'd0}, {tmp_14_fu_741_p2}};

assign tmp_16_fu_759_p2 = (tmp_fu_591_p3 | 12'd9);

assign tmp_17_fu_769_p3 = {{52'd0}, {tmp_16_fu_759_p2}};

assign tmp_18_fu_777_p2 = (tmp_fu_591_p3 | 12'd10);

assign tmp_19_fu_787_p3 = {{52'd0}, {tmp_18_fu_777_p2}};

assign tmp_1_fu_625_p3 = {{52'd0}, {tmp_s_fu_615_p2}};

assign tmp_20_fu_795_p2 = (tmp_fu_591_p3 | 12'd11);

assign tmp_21_fu_805_p3 = {{52'd0}, {tmp_20_fu_795_p2}};

assign tmp_22_fu_813_p2 = (tmp_fu_591_p3 | 12'd12);

assign tmp_23_fu_823_p3 = {{52'd0}, {tmp_22_fu_813_p2}};

assign tmp_24_fu_831_p2 = (tmp_fu_591_p3 | 12'd13);

assign tmp_25_fu_841_p3 = {{52'd0}, {tmp_24_fu_831_p2}};

assign tmp_26_fu_849_p2 = (tmp_fu_591_p3 | 12'd14);

assign tmp_27_fu_859_p3 = {{52'd0}, {tmp_26_fu_849_p2}};

assign tmp_28_fu_867_p2 = (tmp_fu_591_p3 | 12'd15);

assign tmp_29_fu_877_p3 = {{52'd0}, {tmp_28_fu_867_p2}};

assign tmp_2_fu_633_p2 = (tmp_fu_591_p3 | 12'd2);

assign tmp_32_cast1_fu_611_p1 = tmp_fu_591_p3;

assign tmp_32_cast_fu_603_p3 = {{tmp_32_fu_599_p1}, {4'd0}};

assign tmp_32_fu_599_p1 = round[6:0];

assign tmp_33_fu_621_p1 = tmp_s_fu_615_p2[10:0];

assign tmp_34_fu_639_p1 = tmp_2_fu_633_p2[10:0];

assign tmp_35_fu_657_p1 = tmp_4_fu_651_p2[10:0];

assign tmp_36_fu_675_p1 = tmp_6_fu_669_p2[10:0];

assign tmp_37_fu_693_p1 = tmp_8_fu_687_p2[10:0];

assign tmp_38_fu_711_p1 = tmp_10_fu_705_p2[10:0];

assign tmp_39_fu_729_p1 = tmp_12_fu_723_p2[10:0];

assign tmp_3_fu_643_p3 = {{52'd0}, {tmp_2_fu_633_p2}};

assign tmp_40_fu_747_p1 = tmp_14_fu_741_p2[10:0];

assign tmp_41_fu_765_p1 = tmp_16_fu_759_p2[10:0];

assign tmp_42_fu_783_p1 = tmp_18_fu_777_p2[10:0];

assign tmp_43_fu_801_p1 = tmp_20_fu_795_p2[10:0];

assign tmp_44_fu_819_p1 = tmp_22_fu_813_p2[10:0];

assign tmp_45_fu_837_p1 = tmp_24_fu_831_p2[10:0];

assign tmp_46_fu_855_p1 = tmp_26_fu_849_p2[10:0];

assign tmp_47_fu_873_p1 = tmp_28_fu_867_p2[10:0];

assign tmp_4_fu_651_p2 = (tmp_fu_591_p3 | 12'd3);

assign tmp_5_fu_661_p3 = {{52'd0}, {tmp_4_fu_651_p2}};

assign tmp_6_fu_669_p2 = (tmp_fu_591_p3 | 12'd4);

assign tmp_7_fu_679_p3 = {{52'd0}, {tmp_6_fu_669_p2}};

assign tmp_8_fu_687_p2 = (tmp_fu_591_p3 | 12'd5);

assign tmp_9_fu_697_p3 = {{52'd0}, {tmp_8_fu_687_p2}};

assign tmp_fu_591_p3 = {{round}, {4'd0}};

assign tmp_s_fu_615_p2 = (tmp_fu_591_p3 | 12'd1);

endmodule //AddRoundKey
