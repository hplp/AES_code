// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module SubBytes (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        ap_ce,
        state_0_read,
        state_1_read,
        state_2_read,
        state_3_read,
        state_4_read,
        state_5_read,
        state_6_read,
        state_7_read,
        state_8_read,
        state_9_read,
        state_10_read,
        state_11_read,
        state_1213_read,
        state_13_read,
        state_14_read,
        state_15_read,
        ap_return_0,
        ap_return_1,
        ap_return_2,
        ap_return_3,
        ap_return_4,
        ap_return_5,
        ap_return_6,
        ap_return_7,
        ap_return_8,
        ap_return_9,
        ap_return_10,
        ap_return_11,
        ap_return_12,
        ap_return_13,
        ap_return_14,
        ap_return_15
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input   ap_ce;
input  [7:0] state_0_read;
input  [7:0] state_1_read;
input  [7:0] state_2_read;
input  [7:0] state_3_read;
input  [7:0] state_4_read;
input  [7:0] state_5_read;
input  [7:0] state_6_read;
input  [7:0] state_7_read;
input  [7:0] state_8_read;
input  [7:0] state_9_read;
input  [7:0] state_10_read;
input  [7:0] state_11_read;
input  [7:0] state_1213_read;
input  [7:0] state_13_read;
input  [7:0] state_14_read;
input  [7:0] state_15_read;
output  [7:0] ap_return_0;
output  [7:0] ap_return_1;
output  [7:0] ap_return_2;
output  [7:0] ap_return_3;
output  [7:0] ap_return_4;
output  [7:0] ap_return_5;
output  [7:0] ap_return_6;
output  [7:0] ap_return_7;
output  [7:0] ap_return_8;
output  [7:0] ap_return_9;
output  [7:0] ap_return_10;
output  [7:0] ap_return_11;
output  [7:0] ap_return_12;
output  [7:0] ap_return_13;
output  [7:0] ap_return_14;
output  [7:0] ap_return_15;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
wire    ap_block_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
reg    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_11001;
wire   [9:0] cipher_address0;
reg    cipher_ce0;
wire   [7:0] cipher_q0;
wire   [9:0] cipher_address1;
reg    cipher_ce1;
wire   [7:0] cipher_q1;
wire   [9:0] cipher_address2;
reg    cipher_ce2;
wire   [7:0] cipher_q2;
wire   [9:0] cipher_address3;
reg    cipher_ce3;
wire   [7:0] cipher_q3;
wire   [9:0] cipher_address4;
reg    cipher_ce4;
wire   [7:0] cipher_q4;
wire   [9:0] cipher_address5;
reg    cipher_ce5;
wire   [7:0] cipher_q5;
wire   [9:0] cipher_address6;
reg    cipher_ce6;
wire   [7:0] cipher_q6;
wire   [9:0] cipher_address7;
reg    cipher_ce7;
wire   [7:0] cipher_q7;
wire   [9:0] cipher_address8;
reg    cipher_ce8;
wire   [7:0] cipher_q8;
wire   [9:0] cipher_address9;
reg    cipher_ce9;
wire   [7:0] cipher_q9;
wire   [9:0] cipher_address10;
reg    cipher_ce10;
wire   [7:0] cipher_q10;
wire   [9:0] cipher_address11;
reg    cipher_ce11;
wire   [7:0] cipher_q11;
wire   [9:0] cipher_address12;
reg    cipher_ce12;
wire   [7:0] cipher_q12;
wire   [9:0] cipher_address13;
reg    cipher_ce13;
wire   [7:0] cipher_q13;
wire   [9:0] cipher_address14;
reg    cipher_ce14;
wire   [7:0] cipher_q14;
wire   [9:0] cipher_address15;
reg    cipher_ce15;
wire   [7:0] cipher_q15;
reg    ap_block_pp0_stage0_subdone;
wire   [63:0] tmp_2_fu_329_p1;
wire   [63:0] tmp_2_1_fu_334_p1;
wire   [63:0] tmp_2_2_fu_339_p1;
wire   [63:0] tmp_2_3_fu_344_p1;
wire   [63:0] tmp_2_4_fu_349_p1;
wire   [63:0] tmp_2_5_fu_354_p1;
wire   [63:0] tmp_2_6_fu_359_p1;
wire   [63:0] tmp_2_7_fu_364_p1;
wire   [63:0] tmp_2_8_fu_369_p1;
wire   [63:0] tmp_2_9_fu_374_p1;
wire   [63:0] tmp_2_s_fu_379_p1;
wire   [63:0] tmp_2_10_fu_384_p1;
wire   [63:0] tmp_2_11_fu_389_p1;
wire   [63:0] tmp_2_12_fu_394_p1;
wire   [63:0] tmp_2_13_fu_399_p1;
wire   [63:0] tmp_2_14_fu_404_p1;
reg   [0:0] ap_NS_fsm;
reg    ap_idle_pp0_0to0;
reg    ap_reset_idle_pp0;
reg    ap_reset_start_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

SubBytes_cipher #(
    .DataWidth( 8 ),
    .AddressRange( 768 ),
    .AddressWidth( 10 ))
cipher_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(cipher_address0),
    .ce0(cipher_ce0),
    .q0(cipher_q0),
    .address1(cipher_address1),
    .ce1(cipher_ce1),
    .q1(cipher_q1),
    .address2(cipher_address2),
    .ce2(cipher_ce2),
    .q2(cipher_q2),
    .address3(cipher_address3),
    .ce3(cipher_ce3),
    .q3(cipher_q3),
    .address4(cipher_address4),
    .ce4(cipher_ce4),
    .q4(cipher_q4),
    .address5(cipher_address5),
    .ce5(cipher_ce5),
    .q5(cipher_q5),
    .address6(cipher_address6),
    .ce6(cipher_ce6),
    .q6(cipher_q6),
    .address7(cipher_address7),
    .ce7(cipher_ce7),
    .q7(cipher_q7),
    .address8(cipher_address8),
    .ce8(cipher_ce8),
    .q8(cipher_q8),
    .address9(cipher_address9),
    .ce9(cipher_ce9),
    .q9(cipher_q9),
    .address10(cipher_address10),
    .ce10(cipher_ce10),
    .q10(cipher_q10),
    .address11(cipher_address11),
    .ce11(cipher_ce11),
    .q11(cipher_q11),
    .address12(cipher_address12),
    .ce12(cipher_ce12),
    .q12(cipher_q12),
    .address13(cipher_address13),
    .ce13(cipher_ce13),
    .q13(cipher_q13),
    .address14(cipher_address14),
    .ce14(cipher_ce14),
    .q14(cipher_q14),
    .address15(cipher_address15),
    .ce15(cipher_ce15),
    .q15(cipher_q15)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter1 <= ap_start;
        end
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b1 == ap_ce) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b0)) begin
        ap_idle_pp0_0to0 = 1'b1;
    end else begin
        ap_idle_pp0_0to0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_ce) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0_0to0 == 1'b1))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_idle_pp0_0to0 == 1'b1) & (ap_start == 1'b1))) begin
        ap_reset_start_pp0 = 1'b1;
    end else begin
        ap_reset_start_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_ce) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        cipher_ce0 = 1'b1;
    end else begin
        cipher_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_ce) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        cipher_ce1 = 1'b1;
    end else begin
        cipher_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_ce) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        cipher_ce10 = 1'b1;
    end else begin
        cipher_ce10 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_ce) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        cipher_ce11 = 1'b1;
    end else begin
        cipher_ce11 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_ce) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        cipher_ce12 = 1'b1;
    end else begin
        cipher_ce12 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_ce) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        cipher_ce13 = 1'b1;
    end else begin
        cipher_ce13 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_ce) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        cipher_ce14 = 1'b1;
    end else begin
        cipher_ce14 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_ce) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        cipher_ce15 = 1'b1;
    end else begin
        cipher_ce15 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_ce) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        cipher_ce2 = 1'b1;
    end else begin
        cipher_ce2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_ce) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        cipher_ce3 = 1'b1;
    end else begin
        cipher_ce3 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_ce) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        cipher_ce4 = 1'b1;
    end else begin
        cipher_ce4 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_ce) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        cipher_ce5 = 1'b1;
    end else begin
        cipher_ce5 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_ce) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        cipher_ce6 = 1'b1;
    end else begin
        cipher_ce6 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_ce) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        cipher_ce7 = 1'b1;
    end else begin
        cipher_ce7 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_ce) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        cipher_ce8 = 1'b1;
    end else begin
        cipher_ce8 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_ce) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        cipher_ce9 = 1'b1;
    end else begin
        cipher_ce9 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_start == 1'b0) & (ap_start == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((1'b0 == ap_ce) | ((ap_start == 1'b0) & (ap_start == 1'b1)));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_start == 1'b0);
end

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start;

assign ap_return_0 = cipher_q0;

assign ap_return_1 = cipher_q1;

assign ap_return_10 = cipher_q10;

assign ap_return_11 = cipher_q11;

assign ap_return_12 = cipher_q12;

assign ap_return_13 = cipher_q13;

assign ap_return_14 = cipher_q14;

assign ap_return_15 = cipher_q15;

assign ap_return_2 = cipher_q2;

assign ap_return_3 = cipher_q3;

assign ap_return_4 = cipher_q4;

assign ap_return_5 = cipher_q5;

assign ap_return_6 = cipher_q6;

assign ap_return_7 = cipher_q7;

assign ap_return_8 = cipher_q8;

assign ap_return_9 = cipher_q9;

assign cipher_address0 = tmp_2_fu_329_p1;

assign cipher_address1 = tmp_2_1_fu_334_p1;

assign cipher_address10 = tmp_2_s_fu_379_p1;

assign cipher_address11 = tmp_2_10_fu_384_p1;

assign cipher_address12 = tmp_2_11_fu_389_p1;

assign cipher_address13 = tmp_2_12_fu_394_p1;

assign cipher_address14 = tmp_2_13_fu_399_p1;

assign cipher_address15 = tmp_2_14_fu_404_p1;

assign cipher_address2 = tmp_2_2_fu_339_p1;

assign cipher_address3 = tmp_2_3_fu_344_p1;

assign cipher_address4 = tmp_2_4_fu_349_p1;

assign cipher_address5 = tmp_2_5_fu_354_p1;

assign cipher_address6 = tmp_2_6_fu_359_p1;

assign cipher_address7 = tmp_2_7_fu_364_p1;

assign cipher_address8 = tmp_2_8_fu_369_p1;

assign cipher_address9 = tmp_2_9_fu_374_p1;

assign tmp_2_10_fu_384_p1 = state_11_read;

assign tmp_2_11_fu_389_p1 = state_1213_read;

assign tmp_2_12_fu_394_p1 = state_13_read;

assign tmp_2_13_fu_399_p1 = state_14_read;

assign tmp_2_14_fu_404_p1 = state_15_read;

assign tmp_2_1_fu_334_p1 = state_1_read;

assign tmp_2_2_fu_339_p1 = state_2_read;

assign tmp_2_3_fu_344_p1 = state_3_read;

assign tmp_2_4_fu_349_p1 = state_4_read;

assign tmp_2_5_fu_354_p1 = state_5_read;

assign tmp_2_6_fu_359_p1 = state_6_read;

assign tmp_2_7_fu_364_p1 = state_7_read;

assign tmp_2_8_fu_369_p1 = state_8_read;

assign tmp_2_9_fu_374_p1 = state_9_read;

assign tmp_2_fu_329_p1 = state_0_read;

assign tmp_2_s_fu_379_p1 = state_10_read;

endmodule //SubBytes
