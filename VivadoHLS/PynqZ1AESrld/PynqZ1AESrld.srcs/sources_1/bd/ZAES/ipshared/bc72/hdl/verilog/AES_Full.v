// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="AES_Full,hls_ip_2018_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.943000,HLS_SYN_LAT=545,HLS_SYN_TPT=none,HLS_SYN_MEM=21,HLS_SYN_DSP=0,HLS_SYN_FF=1439,HLS_SYN_LUT=5621,HLS_VERSION=2018_3}" *)

module AES_Full (
        ap_clk,
        ap_rst_n,
        s_axi_AES_AWVALID,
        s_axi_AES_AWREADY,
        s_axi_AES_AWADDR,
        s_axi_AES_WVALID,
        s_axi_AES_WREADY,
        s_axi_AES_WDATA,
        s_axi_AES_WSTRB,
        s_axi_AES_ARVALID,
        s_axi_AES_ARREADY,
        s_axi_AES_ARADDR,
        s_axi_AES_RVALID,
        s_axi_AES_RREADY,
        s_axi_AES_RDATA,
        s_axi_AES_RRESP,
        s_axi_AES_BVALID,
        s_axi_AES_BREADY,
        s_axi_AES_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 48'd1;
parameter    ap_ST_fsm_state2 = 48'd2;
parameter    ap_ST_fsm_state3 = 48'd4;
parameter    ap_ST_fsm_state4 = 48'd8;
parameter    ap_ST_fsm_state5 = 48'd16;
parameter    ap_ST_fsm_state6 = 48'd32;
parameter    ap_ST_fsm_state7 = 48'd64;
parameter    ap_ST_fsm_state8 = 48'd128;
parameter    ap_ST_fsm_state9 = 48'd256;
parameter    ap_ST_fsm_state10 = 48'd512;
parameter    ap_ST_fsm_state11 = 48'd1024;
parameter    ap_ST_fsm_state12 = 48'd2048;
parameter    ap_ST_fsm_state13 = 48'd4096;
parameter    ap_ST_fsm_state14 = 48'd8192;
parameter    ap_ST_fsm_state15 = 48'd16384;
parameter    ap_ST_fsm_state16 = 48'd32768;
parameter    ap_ST_fsm_state17 = 48'd65536;
parameter    ap_ST_fsm_state18 = 48'd131072;
parameter    ap_ST_fsm_state19 = 48'd262144;
parameter    ap_ST_fsm_state20 = 48'd524288;
parameter    ap_ST_fsm_state21 = 48'd1048576;
parameter    ap_ST_fsm_state22 = 48'd2097152;
parameter    ap_ST_fsm_state23 = 48'd4194304;
parameter    ap_ST_fsm_state24 = 48'd8388608;
parameter    ap_ST_fsm_state25 = 48'd16777216;
parameter    ap_ST_fsm_state26 = 48'd33554432;
parameter    ap_ST_fsm_state27 = 48'd67108864;
parameter    ap_ST_fsm_state28 = 48'd134217728;
parameter    ap_ST_fsm_state29 = 48'd268435456;
parameter    ap_ST_fsm_state30 = 48'd536870912;
parameter    ap_ST_fsm_state31 = 48'd1073741824;
parameter    ap_ST_fsm_state32 = 48'd2147483648;
parameter    ap_ST_fsm_state33 = 48'd4294967296;
parameter    ap_ST_fsm_state34 = 48'd8589934592;
parameter    ap_ST_fsm_state35 = 48'd17179869184;
parameter    ap_ST_fsm_state36 = 48'd34359738368;
parameter    ap_ST_fsm_state37 = 48'd68719476736;
parameter    ap_ST_fsm_state38 = 48'd137438953472;
parameter    ap_ST_fsm_state39 = 48'd274877906944;
parameter    ap_ST_fsm_state40 = 48'd549755813888;
parameter    ap_ST_fsm_state41 = 48'd1099511627776;
parameter    ap_ST_fsm_state42 = 48'd2199023255552;
parameter    ap_ST_fsm_state43 = 48'd4398046511104;
parameter    ap_ST_fsm_state44 = 48'd8796093022208;
parameter    ap_ST_fsm_state45 = 48'd17592186044416;
parameter    ap_ST_fsm_state46 = 48'd35184372088832;
parameter    ap_ST_fsm_state47 = 48'd70368744177664;
parameter    ap_ST_fsm_state48 = 48'd140737488355328;
parameter    C_S_AXI_AES_DATA_WIDTH = 32;
parameter    C_S_AXI_AES_ADDR_WIDTH = 6;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_AES_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
input   s_axi_AES_AWVALID;
output   s_axi_AES_AWREADY;
input  [C_S_AXI_AES_ADDR_WIDTH - 1:0] s_axi_AES_AWADDR;
input   s_axi_AES_WVALID;
output   s_axi_AES_WREADY;
input  [C_S_AXI_AES_DATA_WIDTH - 1:0] s_axi_AES_WDATA;
input  [C_S_AXI_AES_WSTRB_WIDTH - 1:0] s_axi_AES_WSTRB;
input   s_axi_AES_ARVALID;
output   s_axi_AES_ARREADY;
input  [C_S_AXI_AES_ADDR_WIDTH - 1:0] s_axi_AES_ARADDR;
output   s_axi_AES_RVALID;
input   s_axi_AES_RREADY;
output  [C_S_AXI_AES_DATA_WIDTH - 1:0] s_axi_AES_RDATA;
output  [1:0] s_axi_AES_RRESP;
output   s_axi_AES_BVALID;
input   s_axi_AES_BREADY;
output  [1:0] s_axi_AES_BRESP;
output   interrupt;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [47:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire    cipher_or_i_cipher;
wire   [7:0] Nr;
reg   [3:0] data_in_address0;
reg    data_in_ce0;
wire   [7:0] data_in_q0;
reg   [3:0] data_out_address0;
reg    data_out_ce0;
reg    data_out_we0;
reg   [7:0] data_out_d0;
wire   [8:0] grp_fu_573_p2;
reg   [8:0] reg_578;
wire    ap_CS_fsm_state4;
wire    grp_AddRoundKey_fu_474_ap_ready;
wire    grp_AddRoundKey_fu_474_ap_done;
wire    ap_CS_fsm_state27;
wire   [7:0] state_1_q0;
reg   [7:0] reg_582;
wire    ap_CS_fsm_state6;
wire   [7:0] state_1_q1;
wire    ap_CS_fsm_state11;
reg   [7:0] reg_588;
wire   [7:0] state_q0;
reg   [7:0] reg_594;
wire    ap_CS_fsm_state31;
wire   [7:0] state_q1;
wire    ap_CS_fsm_state36;
reg   [7:0] reg_600;
reg   [7:0] Nr_read_reg_744;
wire   [0:0] cipher_or_i_cipher_r_read_fu_142_p2;
reg   [0:0] cipher_or_i_cipher_r_reg_751;
wire   [8:0] tmp_cast_fu_606_p1;
reg   [8:0] tmp_cast_reg_755;
wire   [4:0] i_1_fu_616_p2;
reg   [4:0] i_1_reg_763;
wire    ap_CS_fsm_state2;
wire   [63:0] tmp_67_fu_622_p1;
reg   [63:0] tmp_67_reg_768;
wire   [0:0] tmp_62_fu_610_p2;
wire   [7:0] tmp_66_fu_627_p2;
reg   [7:0] tmp_66_reg_846;
wire   [0:0] tmp_69_fu_636_p2;
reg   [0:0] tmp_69_reg_851;
wire    ap_CS_fsm_state5;
wire   [3:0] j_fu_642_p2;
reg   [3:0] j_reg_855;
wire   [7:0] tmp_71_fu_648_p2;
reg   [7:0] tmp_71_reg_860;
wire   [0:0] tmp_72_fu_657_p2;
reg   [0:0] tmp_72_reg_865;
reg   [7:0] state_1_load_2_reg_869;
wire    ap_CS_fsm_state7;
reg   [7:0] state_1_load_3_reg_874;
reg   [7:0] state_1_load_4_reg_879;
wire    ap_CS_fsm_state8;
reg   [7:0] state_1_load_5_reg_884;
reg   [7:0] state_1_load_6_reg_889;
wire    ap_CS_fsm_state9;
reg   [7:0] state_1_load_7_reg_894;
reg   [7:0] state_1_load_8_reg_899;
wire    ap_CS_fsm_state10;
reg   [7:0] state_1_load_9_reg_904;
wire   [4:0] i_2_fu_669_p2;
reg   [4:0] i_2_reg_912;
wire    ap_CS_fsm_state23;
wire   [63:0] tmp_74_fu_675_p1;
reg   [63:0] tmp_74_reg_917;
wire   [0:0] tmp_73_fu_663_p2;
wire   [4:0] i_3_fu_686_p2;
reg   [4:0] i_3_reg_930;
wire   [63:0] tmp_76_fu_692_p1;
reg   [63:0] tmp_76_reg_935;
wire   [0:0] tmp_75_fu_680_p2;
wire   [4:0] i_fu_703_p2;
reg   [4:0] i_reg_948;
wire    ap_CS_fsm_state25;
wire   [63:0] tmp_64_fu_709_p1;
reg   [63:0] tmp_64_reg_953;
wire   [0:0] tmp_s_fu_697_p2;
wire   [0:0] tmp_68_fu_714_p2;
reg   [0:0] tmp_68_reg_1031;
wire    ap_CS_fsm_state28;
wire   [3:0] j_1_fu_720_p2;
reg   [3:0] j_1_reg_1035;
wire   [0:0] tmp_70_fu_730_p2;
reg   [0:0] tmp_70_reg_1042;
reg   [7:0] state_load_34_reg_1046;
wire    ap_CS_fsm_state32;
reg   [7:0] state_load_36_reg_1051;
reg   [7:0] state_load_37_reg_1056;
wire    ap_CS_fsm_state33;
reg   [7:0] state_load_38_reg_1061;
reg   [7:0] state_load_40_reg_1066;
wire    ap_CS_fsm_state34;
reg   [7:0] state_load_41_reg_1071;
reg   [7:0] state_load_42_reg_1076;
wire    ap_CS_fsm_state35;
reg   [7:0] state_load_44_reg_1081;
wire   [7:0] j_1_cast_fu_736_p1;
reg   [7:0] j_1_cast_reg_1086;
wire    ap_CS_fsm_state44;
wire   [7:0] j_1_cast_c_fu_740_p1;
reg   [7:0] j_1_cast_c_reg_1091;
wire    ap_CS_fsm_state46;
reg   [3:0] state_1_address0;
reg    state_1_ce0;
reg    state_1_we0;
reg   [7:0] state_1_d0;
reg   [3:0] state_1_address1;
reg    state_1_ce1;
reg    state_1_we1;
reg   [7:0] state_1_d1;
reg   [3:0] state_address0;
reg    state_ce0;
reg    state_we0;
reg   [7:0] state_d0;
reg   [3:0] state_address1;
reg    state_ce1;
reg    state_we1;
reg   [7:0] state_d1;
wire    grp_AddRoundKey_fu_474_ap_start;
wire    grp_AddRoundKey_fu_474_ap_idle;
wire   [3:0] grp_AddRoundKey_fu_474_state_address0;
wire    grp_AddRoundKey_fu_474_state_ce0;
wire    grp_AddRoundKey_fu_474_state_we0;
wire   [7:0] grp_AddRoundKey_fu_474_state_d0;
reg   [7:0] grp_AddRoundKey_fu_474_state_q0;
wire   [3:0] grp_AddRoundKey_fu_474_state_address1;
wire    grp_AddRoundKey_fu_474_state_ce1;
wire    grp_AddRoundKey_fu_474_state_we1;
wire   [7:0] grp_AddRoundKey_fu_474_state_d1;
reg   [7:0] grp_AddRoundKey_fu_474_state_q1;
reg   [7:0] grp_AddRoundKey_fu_474_round;
wire    grp_SubBytes_fu_508_ap_start;
wire    grp_SubBytes_fu_508_ap_done;
wire    grp_SubBytes_fu_508_ap_idle;
wire    grp_SubBytes_fu_508_ap_ready;
wire   [3:0] grp_SubBytes_fu_508_state_address0;
wire    grp_SubBytes_fu_508_state_ce0;
wire    grp_SubBytes_fu_508_state_we0;
wire   [7:0] grp_SubBytes_fu_508_state_d0;
wire   [3:0] grp_SubBytes_fu_508_state_address1;
wire    grp_SubBytes_fu_508_state_ce1;
wire    grp_SubBytes_fu_508_state_we1;
wire   [7:0] grp_SubBytes_fu_508_state_d1;
wire    grp_MixColumns_fu_524_ap_start;
wire    grp_MixColumns_fu_524_ap_done;
wire    grp_MixColumns_fu_524_ap_idle;
wire    grp_MixColumns_fu_524_ap_ready;
wire   [3:0] grp_MixColumns_fu_524_state_address0;
wire    grp_MixColumns_fu_524_state_ce0;
wire    grp_MixColumns_fu_524_state_we0;
wire   [7:0] grp_MixColumns_fu_524_state_d0;
wire   [3:0] grp_MixColumns_fu_524_state_address1;
wire    grp_MixColumns_fu_524_state_ce1;
wire    grp_MixColumns_fu_524_state_we1;
wire   [7:0] grp_MixColumns_fu_524_state_d1;
wire    grp_InvSubBytes_fu_540_ap_start;
wire    grp_InvSubBytes_fu_540_ap_done;
wire    grp_InvSubBytes_fu_540_ap_idle;
wire    grp_InvSubBytes_fu_540_ap_ready;
wire   [3:0] grp_InvSubBytes_fu_540_state_address0;
wire    grp_InvSubBytes_fu_540_state_ce0;
wire    grp_InvSubBytes_fu_540_state_we0;
wire   [7:0] grp_InvSubBytes_fu_540_state_d0;
wire   [3:0] grp_InvSubBytes_fu_540_state_address1;
wire    grp_InvSubBytes_fu_540_state_ce1;
wire    grp_InvSubBytes_fu_540_state_we1;
wire   [7:0] grp_InvSubBytes_fu_540_state_d1;
wire    grp_InvMixColumns_fu_556_ap_start;
wire    grp_InvMixColumns_fu_556_ap_done;
wire    grp_InvMixColumns_fu_556_ap_idle;
wire    grp_InvMixColumns_fu_556_ap_ready;
wire   [3:0] grp_InvMixColumns_fu_556_state_address0;
wire    grp_InvMixColumns_fu_556_state_ce0;
wire    grp_InvMixColumns_fu_556_state_we0;
wire   [7:0] grp_InvMixColumns_fu_556_state_d0;
wire   [3:0] grp_InvMixColumns_fu_556_state_address1;
wire    grp_InvMixColumns_fu_556_state_ce1;
wire    grp_InvMixColumns_fu_556_state_we1;
wire   [7:0] grp_InvMixColumns_fu_556_state_d1;
reg   [4:0] i_0_i5_reg_408;
wire    ap_CS_fsm_state3;
reg   [3:0] j_0_i8_reg_419;
wire    ap_CS_fsm_state22;
reg   [4:0] i1_0_i1_reg_430;
wire    ap_CS_fsm_state20;
reg    ap_block_state20_on_subcall_done;
wire    ap_CS_fsm_state24;
reg   [4:0] i1_0_i_reg_441;
wire    ap_CS_fsm_state47;
reg    ap_block_state47_on_subcall_done;
wire    ap_CS_fsm_state48;
reg   [4:0] i_0_i_reg_452;
wire    ap_CS_fsm_state26;
reg   [3:0] j_0_i_reg_463;
wire    ap_CS_fsm_state45;
reg    grp_AddRoundKey_fu_474_ap_start_reg;
wire    ap_CS_fsm_state19;
reg    grp_SubBytes_fu_508_ap_start_reg;
wire    ap_CS_fsm_state29;
reg    grp_MixColumns_fu_524_ap_start_reg;
wire    ap_CS_fsm_state42;
wire    ap_CS_fsm_state43;
reg    grp_InvSubBytes_fu_540_ap_start_reg;
wire    ap_CS_fsm_state17;
wire    ap_CS_fsm_state18;
reg    grp_InvMixColumns_fu_556_ap_start_reg;
wire    ap_CS_fsm_state21;
wire    ap_CS_fsm_state12;
wire    ap_CS_fsm_state13;
wire    ap_CS_fsm_state14;
wire    ap_CS_fsm_state15;
wire    ap_CS_fsm_state16;
wire    ap_CS_fsm_state30;
wire    ap_CS_fsm_state37;
wire    ap_CS_fsm_state38;
wire    ap_CS_fsm_state39;
wire    ap_CS_fsm_state40;
wire    ap_CS_fsm_state41;
wire   [7:0] j_0_i8_cast2_fu_632_p1;
wire   [8:0] tmp_137_cast_fu_653_p1;
wire   [8:0] tmp_133_cast_fu_726_p1;
reg   [47:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 48'd1;
#0 grp_AddRoundKey_fu_474_ap_start_reg = 1'b0;
#0 grp_SubBytes_fu_508_ap_start_reg = 1'b0;
#0 grp_MixColumns_fu_524_ap_start_reg = 1'b0;
#0 grp_InvSubBytes_fu_540_ap_start_reg = 1'b0;
#0 grp_InvMixColumns_fu_556_ap_start_reg = 1'b0;
end

AES_Full_AES_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_AES_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_AES_DATA_WIDTH ))
AES_Full_AES_s_axi_U(
    .AWVALID(s_axi_AES_AWVALID),
    .AWREADY(s_axi_AES_AWREADY),
    .AWADDR(s_axi_AES_AWADDR),
    .WVALID(s_axi_AES_WVALID),
    .WREADY(s_axi_AES_WREADY),
    .WDATA(s_axi_AES_WDATA),
    .WSTRB(s_axi_AES_WSTRB),
    .ARVALID(s_axi_AES_ARVALID),
    .ARREADY(s_axi_AES_ARREADY),
    .ARADDR(s_axi_AES_ARADDR),
    .RVALID(s_axi_AES_RVALID),
    .RREADY(s_axi_AES_RREADY),
    .RDATA(s_axi_AES_RDATA),
    .RRESP(s_axi_AES_RRESP),
    .BVALID(s_axi_AES_BVALID),
    .BREADY(s_axi_AES_BREADY),
    .BRESP(s_axi_AES_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .cipher_or_i_cipher(cipher_or_i_cipher),
    .Nr(Nr),
    .data_in_address0(data_in_address0),
    .data_in_ce0(data_in_ce0),
    .data_in_q0(data_in_q0),
    .data_out_address0(data_out_address0),
    .data_out_ce0(data_out_ce0),
    .data_out_we0(data_out_we0),
    .data_out_d0(data_out_d0)
);

AES_Full_state_1 #(
    .DataWidth( 8 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
state_1_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(state_1_address0),
    .ce0(state_1_ce0),
    .we0(state_1_we0),
    .d0(state_1_d0),
    .q0(state_1_q0),
    .address1(state_1_address1),
    .ce1(state_1_ce1),
    .we1(state_1_we1),
    .d1(state_1_d1),
    .q1(state_1_q1)
);

AES_Full_state_1 #(
    .DataWidth( 8 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
state_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(state_address0),
    .ce0(state_ce0),
    .we0(state_we0),
    .d0(state_d0),
    .q0(state_q0),
    .address1(state_address1),
    .ce1(state_ce1),
    .we1(state_we1),
    .d1(state_d1),
    .q1(state_q1)
);

AddRoundKey grp_AddRoundKey_fu_474(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_AddRoundKey_fu_474_ap_start),
    .ap_done(grp_AddRoundKey_fu_474_ap_done),
    .ap_idle(grp_AddRoundKey_fu_474_ap_idle),
    .ap_ready(grp_AddRoundKey_fu_474_ap_ready),
    .state_address0(grp_AddRoundKey_fu_474_state_address0),
    .state_ce0(grp_AddRoundKey_fu_474_state_ce0),
    .state_we0(grp_AddRoundKey_fu_474_state_we0),
    .state_d0(grp_AddRoundKey_fu_474_state_d0),
    .state_q0(grp_AddRoundKey_fu_474_state_q0),
    .state_address1(grp_AddRoundKey_fu_474_state_address1),
    .state_ce1(grp_AddRoundKey_fu_474_state_ce1),
    .state_we1(grp_AddRoundKey_fu_474_state_we1),
    .state_d1(grp_AddRoundKey_fu_474_state_d1),
    .state_q1(grp_AddRoundKey_fu_474_state_q1),
    .Nr(Nr_read_reg_744),
    .round(grp_AddRoundKey_fu_474_round)
);

SubBytes grp_SubBytes_fu_508(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_SubBytes_fu_508_ap_start),
    .ap_done(grp_SubBytes_fu_508_ap_done),
    .ap_idle(grp_SubBytes_fu_508_ap_idle),
    .ap_ready(grp_SubBytes_fu_508_ap_ready),
    .state_address0(grp_SubBytes_fu_508_state_address0),
    .state_ce0(grp_SubBytes_fu_508_state_ce0),
    .state_we0(grp_SubBytes_fu_508_state_we0),
    .state_d0(grp_SubBytes_fu_508_state_d0),
    .state_q0(state_q0),
    .state_address1(grp_SubBytes_fu_508_state_address1),
    .state_ce1(grp_SubBytes_fu_508_state_ce1),
    .state_we1(grp_SubBytes_fu_508_state_we1),
    .state_d1(grp_SubBytes_fu_508_state_d1),
    .state_q1(state_q1)
);

MixColumns grp_MixColumns_fu_524(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_MixColumns_fu_524_ap_start),
    .ap_done(grp_MixColumns_fu_524_ap_done),
    .ap_idle(grp_MixColumns_fu_524_ap_idle),
    .ap_ready(grp_MixColumns_fu_524_ap_ready),
    .state_address0(grp_MixColumns_fu_524_state_address0),
    .state_ce0(grp_MixColumns_fu_524_state_ce0),
    .state_we0(grp_MixColumns_fu_524_state_we0),
    .state_d0(grp_MixColumns_fu_524_state_d0),
    .state_q0(state_q0),
    .state_address1(grp_MixColumns_fu_524_state_address1),
    .state_ce1(grp_MixColumns_fu_524_state_ce1),
    .state_we1(grp_MixColumns_fu_524_state_we1),
    .state_d1(grp_MixColumns_fu_524_state_d1),
    .state_q1(state_q1)
);

InvSubBytes grp_InvSubBytes_fu_540(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_InvSubBytes_fu_540_ap_start),
    .ap_done(grp_InvSubBytes_fu_540_ap_done),
    .ap_idle(grp_InvSubBytes_fu_540_ap_idle),
    .ap_ready(grp_InvSubBytes_fu_540_ap_ready),
    .state_address0(grp_InvSubBytes_fu_540_state_address0),
    .state_ce0(grp_InvSubBytes_fu_540_state_ce0),
    .state_we0(grp_InvSubBytes_fu_540_state_we0),
    .state_d0(grp_InvSubBytes_fu_540_state_d0),
    .state_q0(state_1_q0),
    .state_address1(grp_InvSubBytes_fu_540_state_address1),
    .state_ce1(grp_InvSubBytes_fu_540_state_ce1),
    .state_we1(grp_InvSubBytes_fu_540_state_we1),
    .state_d1(grp_InvSubBytes_fu_540_state_d1),
    .state_q1(state_1_q1)
);

InvMixColumns grp_InvMixColumns_fu_556(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_InvMixColumns_fu_556_ap_start),
    .ap_done(grp_InvMixColumns_fu_556_ap_done),
    .ap_idle(grp_InvMixColumns_fu_556_ap_idle),
    .ap_ready(grp_InvMixColumns_fu_556_ap_ready),
    .state_address0(grp_InvMixColumns_fu_556_state_address0),
    .state_ce0(grp_InvMixColumns_fu_556_state_ce0),
    .state_we0(grp_InvMixColumns_fu_556_state_we0),
    .state_d0(grp_InvMixColumns_fu_556_state_d0),
    .state_q0(state_1_q0),
    .state_address1(grp_InvMixColumns_fu_556_state_address1),
    .state_ce1(grp_InvMixColumns_fu_556_state_ce1),
    .state_we1(grp_InvMixColumns_fu_556_state_we1),
    .state_d1(grp_InvMixColumns_fu_556_state_d1),
    .state_q1(state_1_q1)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_AddRoundKey_fu_474_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state46) | (1'b1 == ap_CS_fsm_state44) | ((tmp_s_fu_697_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state25)) | ((1'b1 == ap_CS_fsm_state2) & (tmp_62_fu_610_p2 == 1'd1)))) begin
            grp_AddRoundKey_fu_474_ap_start_reg <= 1'b1;
        end else if ((grp_AddRoundKey_fu_474_ap_ready == 1'b1)) begin
            grp_AddRoundKey_fu_474_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_InvMixColumns_fu_556_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state21)) begin
            grp_InvMixColumns_fu_556_ap_start_reg <= 1'b1;
        end else if ((grp_InvMixColumns_fu_556_ap_ready == 1'b1)) begin
            grp_InvMixColumns_fu_556_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_InvSubBytes_fu_540_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state17)) begin
            grp_InvSubBytes_fu_540_ap_start_reg <= 1'b1;
        end else if ((grp_InvSubBytes_fu_540_ap_ready == 1'b1)) begin
            grp_InvSubBytes_fu_540_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_MixColumns_fu_524_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state42)) begin
            grp_MixColumns_fu_524_ap_start_reg <= 1'b1;
        end else if ((grp_MixColumns_fu_524_ap_ready == 1'b1)) begin
            grp_MixColumns_fu_524_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_SubBytes_fu_508_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state28) & (tmp_68_fu_714_p2 == 1'd0))) begin
            grp_SubBytes_fu_508_ap_start_reg <= 1'b1;
        end else if ((grp_SubBytes_fu_508_ap_ready == 1'b1)) begin
            grp_SubBytes_fu_508_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        i1_0_i1_reg_430 <= i_2_reg_912;
    end else if (((1'b0 == ap_block_state20_on_subcall_done) & (1'b1 == ap_CS_fsm_state20) & ((tmp_72_reg_865 == 1'd1) | (tmp_69_reg_851 == 1'd1)))) begin
        i1_0_i1_reg_430 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state48)) begin
        i1_0_i_reg_441 <= i_3_reg_930;
    end else if (((1'b0 == ap_block_state47_on_subcall_done) & (1'b1 == ap_CS_fsm_state47))) begin
        i1_0_i_reg_441 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        i_0_i5_reg_408 <= i_1_reg_763;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (cipher_or_i_cipher_r_read_fu_142_p2 == 1'd0))) begin
        i_0_i5_reg_408 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        i_0_i_reg_452 <= i_reg_948;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (cipher_or_i_cipher_r_read_fu_142_p2 == 1'd1))) begin
        i_0_i_reg_452 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_InvMixColumns_fu_556_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state22))) begin
        j_0_i8_reg_419 <= j_reg_855;
    end else if (((1'b1 == ap_CS_fsm_state4) & (grp_AddRoundKey_fu_474_ap_done == 1'b1))) begin
        j_0_i8_reg_419 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((grp_AddRoundKey_fu_474_ap_done == 1'b1)) begin
        if ((1'b1 == ap_CS_fsm_state45)) begin
            j_0_i_reg_463 <= j_1_reg_1035;
        end else if ((1'b1 == ap_CS_fsm_state27)) begin
            j_0_i_reg_463 <= 4'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        reg_582 <= state_1_q1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        reg_582 <= state_1_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        reg_588 <= state_1_q0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        reg_588 <= state_1_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state36)) begin
        reg_594 <= state_q1;
    end else if ((1'b1 == ap_CS_fsm_state31)) begin
        reg_594 <= state_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state36)) begin
        reg_600 <= state_q0;
    end else if ((1'b1 == ap_CS_fsm_state31)) begin
        reg_600 <= state_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        Nr_read_reg_744 <= Nr;
        cipher_or_i_cipher_r_reg_751 <= cipher_or_i_cipher;
        tmp_cast_reg_755[7 : 0] <= tmp_cast_fu_606_p1[7 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_1_reg_763 <= i_1_fu_616_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state23) & (cipher_or_i_cipher_r_reg_751 == 1'd0))) begin
        i_2_reg_912 <= i_2_fu_669_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state23) & (cipher_or_i_cipher_r_reg_751 == 1'd1))) begin
        i_3_reg_930 <= i_3_fu_686_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        i_reg_948 <= i_fu_703_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state46)) begin
        j_1_cast_c_reg_1091[3 : 0] <= j_1_cast_c_fu_740_p1[3 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state44)) begin
        j_1_cast_reg_1086[3 : 0] <= j_1_cast_fu_736_p1[3 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        j_1_reg_1035 <= j_1_fu_720_p2;
        tmp_68_reg_1031 <= tmp_68_fu_714_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        j_reg_855 <= j_fu_642_p2;
        tmp_69_reg_851 <= tmp_69_fu_636_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b1 == ap_CS_fsm_state27) & (grp_AddRoundKey_fu_474_ap_done == 1'b1)) | ((1'b1 == ap_CS_fsm_state4) & (grp_AddRoundKey_fu_474_ap_done == 1'b1)))) begin
        reg_578 <= grp_fu_573_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        state_1_load_2_reg_869 <= state_1_q1;
        state_1_load_3_reg_874 <= state_1_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        state_1_load_4_reg_879 <= state_1_q1;
        state_1_load_5_reg_884 <= state_1_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        state_1_load_6_reg_889 <= state_1_q1;
        state_1_load_7_reg_894 <= state_1_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        state_1_load_8_reg_899 <= state_1_q1;
        state_1_load_9_reg_904 <= state_1_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state32)) begin
        state_load_34_reg_1046 <= state_q1;
        state_load_36_reg_1051 <= state_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state33)) begin
        state_load_37_reg_1056 <= state_q1;
        state_load_38_reg_1061 <= state_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        state_load_40_reg_1066 <= state_q1;
        state_load_41_reg_1071 <= state_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state35)) begin
        state_load_42_reg_1076 <= state_q1;
        state_load_44_reg_1081 <= state_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state25) & (tmp_s_fu_697_p2 == 1'd0))) begin
        tmp_64_reg_953[4 : 0] <= tmp_64_fu_709_p1[4 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (grp_AddRoundKey_fu_474_ap_done == 1'b1))) begin
        tmp_66_reg_846 <= tmp_66_fu_627_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (tmp_62_fu_610_p2 == 1'd0))) begin
        tmp_67_reg_768[4 : 0] <= tmp_67_fu_622_p1[4 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state28) & (tmp_68_fu_714_p2 == 1'd0))) begin
        tmp_70_reg_1042 <= tmp_70_fu_730_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (tmp_69_fu_636_p2 == 1'd0))) begin
        tmp_71_reg_860 <= tmp_71_fu_648_p2;
        tmp_72_reg_865 <= tmp_72_fu_657_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state23) & (tmp_73_fu_663_p2 == 1'd0) & (cipher_or_i_cipher_r_reg_751 == 1'd0))) begin
        tmp_74_reg_917[4 : 0] <= tmp_74_fu_675_p1[4 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state23) & (tmp_75_fu_680_p2 == 1'd0) & (cipher_or_i_cipher_r_reg_751 == 1'd1))) begin
        tmp_76_reg_935[4 : 0] <= tmp_76_fu_692_p1[4 : 0];
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state23) & (((tmp_75_fu_680_p2 == 1'd1) & (cipher_or_i_cipher_r_reg_751 == 1'd1)) | ((tmp_73_fu_663_p2 == 1'd1) & (cipher_or_i_cipher_r_reg_751 == 1'd0))))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state23) & (((tmp_75_fu_680_p2 == 1'd1) & (cipher_or_i_cipher_r_reg_751 == 1'd1)) | ((tmp_73_fu_663_p2 == 1'd1) & (cipher_or_i_cipher_r_reg_751 == 1'd0))))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        data_in_address0 = tmp_64_fu_709_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        data_in_address0 = tmp_67_fu_622_p1;
    end else begin
        data_in_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state2))) begin
        data_in_ce0 = 1'b1;
    end else begin
        data_in_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state48)) begin
        data_out_address0 = tmp_76_reg_935;
    end else if ((1'b1 == ap_CS_fsm_state24)) begin
        data_out_address0 = tmp_74_reg_917;
    end else begin
        data_out_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state48) | (1'b1 == ap_CS_fsm_state24))) begin
        data_out_ce0 = 1'b1;
    end else begin
        data_out_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state48)) begin
        data_out_d0 = state_q0;
    end else if ((1'b1 == ap_CS_fsm_state24)) begin
        data_out_d0 = state_1_q1;
    end else begin
        data_out_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state48) | (1'b1 == ap_CS_fsm_state24))) begin
        data_out_we0 = 1'b1;
    end else begin
        data_out_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state47) & (tmp_68_reg_1031 == 1'd0))) begin
        grp_AddRoundKey_fu_474_round = j_1_cast_c_reg_1091;
    end else if ((1'b1 == ap_CS_fsm_state45)) begin
        grp_AddRoundKey_fu_474_round = j_1_cast_reg_1086;
    end else if ((1'b1 == ap_CS_fsm_state27)) begin
        grp_AddRoundKey_fu_474_round = 8'd0;
    end else if (((1'b1 == ap_CS_fsm_state20) & (tmp_69_reg_851 == 1'd0))) begin
        grp_AddRoundKey_fu_474_round = tmp_71_reg_860;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        grp_AddRoundKey_fu_474_round = Nr_read_reg_744;
    end else begin
        grp_AddRoundKey_fu_474_round = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state45) | (1'b1 == ap_CS_fsm_state27) | ((1'b1 == ap_CS_fsm_state47) & (tmp_68_reg_1031 == 1'd0)))) begin
        grp_AddRoundKey_fu_474_state_q0 = state_q0;
    end else if (((1'b1 == ap_CS_fsm_state4) | ((1'b1 == ap_CS_fsm_state20) & (tmp_69_reg_851 == 1'd0)))) begin
        grp_AddRoundKey_fu_474_state_q0 = state_1_q0;
    end else begin
        grp_AddRoundKey_fu_474_state_q0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state45) | (1'b1 == ap_CS_fsm_state27) | ((1'b1 == ap_CS_fsm_state47) & (tmp_68_reg_1031 == 1'd0)))) begin
        grp_AddRoundKey_fu_474_state_q1 = state_q1;
    end else if (((1'b1 == ap_CS_fsm_state4) | ((1'b1 == ap_CS_fsm_state20) & (tmp_69_reg_851 == 1'd0)))) begin
        grp_AddRoundKey_fu_474_state_q1 = state_1_q1;
    end else begin
        grp_AddRoundKey_fu_474_state_q1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        state_1_address0 = 64'd15;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        state_1_address0 = 64'd10;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        state_1_address0 = 64'd7;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        state_1_address0 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        state_1_address0 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        state_1_address0 = 64'd9;
    end else if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state11))) begin
        state_1_address0 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        state_1_address0 = 64'd11;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        state_1_address0 = 64'd1;
    end else if (((1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state5))) begin
        state_1_address0 = 64'd13;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        state_1_address0 = tmp_67_reg_768;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        state_1_address0 = grp_InvMixColumns_fu_556_state_address0;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        state_1_address0 = grp_InvSubBytes_fu_540_state_address0;
    end else if (((1'b1 == ap_CS_fsm_state4) | ((1'b1 == ap_CS_fsm_state20) & (tmp_69_reg_851 == 1'd0)))) begin
        state_1_address0 = grp_AddRoundKey_fu_474_state_address0;
    end else begin
        state_1_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        state_1_address1 = tmp_74_fu_675_p1;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        state_1_address1 = 64'd11;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        state_1_address1 = 64'd9;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        state_1_address1 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        state_1_address1 = 64'd1;
    end else if (((1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state10))) begin
        state_1_address1 = 64'd6;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        state_1_address1 = 64'd15;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        state_1_address1 = 64'd5;
    end else if (((1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state7))) begin
        state_1_address1 = 64'd14;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        state_1_address1 = 64'd7;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        state_1_address1 = 64'd10;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        state_1_address1 = grp_InvMixColumns_fu_556_state_address1;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        state_1_address1 = grp_InvSubBytes_fu_540_state_address1;
    end else if (((1'b1 == ap_CS_fsm_state4) | ((1'b1 == ap_CS_fsm_state20) & (tmp_69_reg_851 == 1'd0)))) begin
        state_1_address1 = grp_AddRoundKey_fu_474_state_address1;
    end else begin
        state_1_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state6))) begin
        state_1_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        state_1_ce0 = grp_InvMixColumns_fu_556_state_ce0;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        state_1_ce0 = grp_InvSubBytes_fu_540_state_ce0;
    end else if (((1'b1 == ap_CS_fsm_state4) | ((1'b1 == ap_CS_fsm_state20) & (tmp_69_reg_851 == 1'd0)))) begin
        state_1_ce0 = grp_AddRoundKey_fu_474_state_ce0;
    end else begin
        state_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state6))) begin
        state_1_ce1 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        state_1_ce1 = grp_InvMixColumns_fu_556_state_ce1;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        state_1_ce1 = grp_InvSubBytes_fu_540_state_ce1;
    end else if (((1'b1 == ap_CS_fsm_state4) | ((1'b1 == ap_CS_fsm_state20) & (tmp_69_reg_851 == 1'd0)))) begin
        state_1_ce1 = grp_AddRoundKey_fu_474_state_ce1;
    end else begin
        state_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        state_1_d0 = state_1_load_9_reg_904;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        state_1_d0 = state_1_load_7_reg_894;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        state_1_d0 = state_1_load_5_reg_884;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        state_1_d0 = state_1_load_3_reg_874;
    end else if (((1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state11))) begin
        state_1_d0 = reg_588;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        state_1_d0 = data_in_q0;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        state_1_d0 = grp_InvMixColumns_fu_556_state_d0;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        state_1_d0 = grp_InvSubBytes_fu_540_state_d0;
    end else if (((1'b1 == ap_CS_fsm_state4) | ((1'b1 == ap_CS_fsm_state20) & (tmp_69_reg_851 == 1'd0)))) begin
        state_1_d0 = grp_AddRoundKey_fu_474_state_d0;
    end else begin
        state_1_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        state_1_d1 = state_1_load_8_reg_899;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        state_1_d1 = state_1_load_6_reg_889;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        state_1_d1 = state_1_load_4_reg_879;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        state_1_d1 = state_1_load_2_reg_869;
    end else if (((1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state11))) begin
        state_1_d1 = reg_582;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        state_1_d1 = grp_InvMixColumns_fu_556_state_d1;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        state_1_d1 = grp_InvSubBytes_fu_540_state_d1;
    end else if (((1'b1 == ap_CS_fsm_state4) | ((1'b1 == ap_CS_fsm_state20) & (tmp_69_reg_851 == 1'd0)))) begin
        state_1_d1 = grp_AddRoundKey_fu_474_state_d1;
    end else begin
        state_1_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state11))) begin
        state_1_we0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        state_1_we0 = grp_InvMixColumns_fu_556_state_we0;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        state_1_we0 = grp_InvSubBytes_fu_540_state_we0;
    end else if (((1'b1 == ap_CS_fsm_state4) | ((1'b1 == ap_CS_fsm_state20) & (tmp_69_reg_851 == 1'd0)))) begin
        state_1_we0 = grp_AddRoundKey_fu_474_state_we0;
    end else begin
        state_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11))) begin
        state_1_we1 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        state_1_we1 = grp_InvMixColumns_fu_556_state_we1;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        state_1_we1 = grp_InvSubBytes_fu_540_state_we1;
    end else if (((1'b1 == ap_CS_fsm_state4) | ((1'b1 == ap_CS_fsm_state20) & (tmp_69_reg_851 == 1'd0)))) begin
        state_1_we1 = grp_AddRoundKey_fu_474_state_we1;
    end else begin
        state_1_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state41)) begin
        state_address0 = 64'd15;
    end else if ((1'b1 == ap_CS_fsm_state40)) begin
        state_address0 = 64'd13;
    end else if ((1'b1 == ap_CS_fsm_state39)) begin
        state_address0 = 64'd10;
    end else if ((1'b1 == ap_CS_fsm_state38)) begin
        state_address0 = 64'd7;
    end else if ((1'b1 == ap_CS_fsm_state35)) begin
        state_address0 = 64'd11;
    end else if ((1'b1 == ap_CS_fsm_state34)) begin
        state_address0 = 64'd1;
    end else if (((1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state36))) begin
        state_address0 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state32)) begin
        state_address0 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state31)) begin
        state_address0 = 64'd9;
    end else if (((1'b1 == ap_CS_fsm_state37) | (1'b1 == ap_CS_fsm_state30))) begin
        state_address0 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state26)) begin
        state_address0 = tmp_64_reg_953;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        state_address0 = tmp_76_fu_692_p1;
    end else if ((1'b1 == ap_CS_fsm_state43)) begin
        state_address0 = grp_MixColumns_fu_524_state_address0;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        state_address0 = grp_SubBytes_fu_508_state_address0;
    end else if (((1'b1 == ap_CS_fsm_state45) | (1'b1 == ap_CS_fsm_state27) | ((1'b1 == ap_CS_fsm_state47) & (tmp_68_reg_1031 == 1'd0)))) begin
        state_address0 = grp_AddRoundKey_fu_474_state_address0;
    end else begin
        state_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state40)) begin
        state_address1 = 64'd11;
    end else if ((1'b1 == ap_CS_fsm_state39)) begin
        state_address1 = 64'd9;
    end else if ((1'b1 == ap_CS_fsm_state37)) begin
        state_address1 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state36)) begin
        state_address1 = 64'd1;
    end else if (((1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state35))) begin
        state_address1 = 64'd6;
    end else if ((1'b1 == ap_CS_fsm_state34)) begin
        state_address1 = 64'd7;
    end else if ((1'b1 == ap_CS_fsm_state33)) begin
        state_address1 = 64'd13;
    end else if (((1'b1 == ap_CS_fsm_state41) | (1'b1 == ap_CS_fsm_state32))) begin
        state_address1 = 64'd14;
    end else if ((1'b1 == ap_CS_fsm_state31)) begin
        state_address1 = 64'd15;
    end else if ((1'b1 == ap_CS_fsm_state30)) begin
        state_address1 = 64'd10;
    end else if ((1'b1 == ap_CS_fsm_state43)) begin
        state_address1 = grp_MixColumns_fu_524_state_address1;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        state_address1 = grp_SubBytes_fu_508_state_address1;
    end else if (((1'b1 == ap_CS_fsm_state45) | (1'b1 == ap_CS_fsm_state27) | ((1'b1 == ap_CS_fsm_state47) & (tmp_68_reg_1031 == 1'd0)))) begin
        state_address1 = grp_AddRoundKey_fu_474_state_address1;
    end else begin
        state_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state41) | (1'b1 == ap_CS_fsm_state40) | (1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state37) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state31))) begin
        state_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state43)) begin
        state_ce0 = grp_MixColumns_fu_524_state_ce0;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        state_ce0 = grp_SubBytes_fu_508_state_ce0;
    end else if (((1'b1 == ap_CS_fsm_state45) | (1'b1 == ap_CS_fsm_state27) | ((1'b1 == ap_CS_fsm_state47) & (tmp_68_reg_1031 == 1'd0)))) begin
        state_ce0 = grp_AddRoundKey_fu_474_state_ce0;
    end else begin
        state_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state41) | (1'b1 == ap_CS_fsm_state40) | (1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state37) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state31))) begin
        state_ce1 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state43)) begin
        state_ce1 = grp_MixColumns_fu_524_state_ce1;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        state_ce1 = grp_SubBytes_fu_508_state_ce1;
    end else if (((1'b1 == ap_CS_fsm_state45) | (1'b1 == ap_CS_fsm_state27) | ((1'b1 == ap_CS_fsm_state47) & (tmp_68_reg_1031 == 1'd0)))) begin
        state_ce1 = grp_AddRoundKey_fu_474_state_ce1;
    end else begin
        state_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state40)) begin
        state_d0 = state_load_44_reg_1081;
    end else if ((1'b1 == ap_CS_fsm_state39)) begin
        state_d0 = state_load_41_reg_1071;
    end else if ((1'b1 == ap_CS_fsm_state38)) begin
        state_d0 = state_load_38_reg_1061;
    end else if ((1'b1 == ap_CS_fsm_state37)) begin
        state_d0 = state_load_36_reg_1051;
    end else if (((1'b1 == ap_CS_fsm_state41) | (1'b1 == ap_CS_fsm_state36))) begin
        state_d0 = reg_600;
    end else if ((1'b1 == ap_CS_fsm_state26)) begin
        state_d0 = data_in_q0;
    end else if ((1'b1 == ap_CS_fsm_state43)) begin
        state_d0 = grp_MixColumns_fu_524_state_d0;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        state_d0 = grp_SubBytes_fu_508_state_d0;
    end else if (((1'b1 == ap_CS_fsm_state45) | (1'b1 == ap_CS_fsm_state27) | ((1'b1 == ap_CS_fsm_state47) & (tmp_68_reg_1031 == 1'd0)))) begin
        state_d0 = grp_AddRoundKey_fu_474_state_d0;
    end else begin
        state_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state40)) begin
        state_d1 = state_load_42_reg_1076;
    end else if ((1'b1 == ap_CS_fsm_state39)) begin
        state_d1 = state_load_40_reg_1066;
    end else if ((1'b1 == ap_CS_fsm_state38)) begin
        state_d1 = state_load_37_reg_1056;
    end else if ((1'b1 == ap_CS_fsm_state37)) begin
        state_d1 = state_load_34_reg_1046;
    end else if (((1'b1 == ap_CS_fsm_state41) | (1'b1 == ap_CS_fsm_state36))) begin
        state_d1 = reg_594;
    end else if ((1'b1 == ap_CS_fsm_state43)) begin
        state_d1 = grp_MixColumns_fu_524_state_d1;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        state_d1 = grp_SubBytes_fu_508_state_d1;
    end else if (((1'b1 == ap_CS_fsm_state45) | (1'b1 == ap_CS_fsm_state27) | ((1'b1 == ap_CS_fsm_state47) & (tmp_68_reg_1031 == 1'd0)))) begin
        state_d1 = grp_AddRoundKey_fu_474_state_d1;
    end else begin
        state_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state41) | (1'b1 == ap_CS_fsm_state40) | (1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state37) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state36))) begin
        state_we0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state43)) begin
        state_we0 = grp_MixColumns_fu_524_state_we0;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        state_we0 = grp_SubBytes_fu_508_state_we0;
    end else if (((1'b1 == ap_CS_fsm_state45) | (1'b1 == ap_CS_fsm_state27) | ((1'b1 == ap_CS_fsm_state47) & (tmp_68_reg_1031 == 1'd0)))) begin
        state_we0 = grp_AddRoundKey_fu_474_state_we0;
    end else begin
        state_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state41) | (1'b1 == ap_CS_fsm_state40) | (1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state37) | (1'b1 == ap_CS_fsm_state36))) begin
        state_we1 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state43)) begin
        state_we1 = grp_MixColumns_fu_524_state_we1;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        state_we1 = grp_SubBytes_fu_508_state_we1;
    end else if (((1'b1 == ap_CS_fsm_state45) | (1'b1 == ap_CS_fsm_state27) | ((1'b1 == ap_CS_fsm_state47) & (tmp_68_reg_1031 == 1'd0)))) begin
        state_we1 = grp_AddRoundKey_fu_474_state_we1;
    end else begin
        state_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (cipher_or_i_cipher_r_read_fu_142_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (cipher_or_i_cipher_r_read_fu_142_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (tmp_62_fu_610_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (grp_AddRoundKey_fu_474_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((tmp_69_fu_636_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            if (((grp_InvSubBytes_fu_540_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state18))) begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            if (((1'b0 == ap_block_state20_on_subcall_done) & (1'b1 == ap_CS_fsm_state20) & ((tmp_72_reg_865 == 1'd1) | (tmp_69_reg_851 == 1'd1)))) begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end else if (((1'b0 == ap_block_state20_on_subcall_done) & (1'b1 == ap_CS_fsm_state20) & (tmp_72_reg_865 == 1'd0) & (tmp_69_reg_851 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            if (((grp_InvMixColumns_fu_556_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state22))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end
        end
        ap_ST_fsm_state23 : begin
            if (((1'b1 == ap_CS_fsm_state23) & (((tmp_75_fu_680_p2 == 1'd1) & (cipher_or_i_cipher_r_reg_751 == 1'd1)) | ((tmp_73_fu_663_p2 == 1'd1) & (cipher_or_i_cipher_r_reg_751 == 1'd0))))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else if (((1'b1 == ap_CS_fsm_state23) & (tmp_75_fu_680_p2 == 1'd0) & (cipher_or_i_cipher_r_reg_751 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state48;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state25 : begin
            if (((tmp_s_fu_697_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state25))) begin
                ap_NS_fsm = ap_ST_fsm_state27;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state26;
            end
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state27 : begin
            if (((1'b1 == ap_CS_fsm_state27) & (grp_AddRoundKey_fu_474_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state28;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state27;
            end
        end
        ap_ST_fsm_state28 : begin
            if (((tmp_68_fu_714_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state28))) begin
                ap_NS_fsm = ap_ST_fsm_state47;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state29;
            end
        end
        ap_ST_fsm_state29 : begin
            if (((grp_SubBytes_fu_508_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state29))) begin
                ap_NS_fsm = ap_ST_fsm_state30;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state29;
            end
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            if (((tmp_70_reg_1042 == 1'd1) & (1'b1 == ap_CS_fsm_state41))) begin
                ap_NS_fsm = ap_ST_fsm_state46;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state42;
            end
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            if (((grp_MixColumns_fu_524_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state43))) begin
                ap_NS_fsm = ap_ST_fsm_state44;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state43;
            end
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            if (((1'b1 == ap_CS_fsm_state45) & (grp_AddRoundKey_fu_474_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state28;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state45;
            end
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            if (((1'b0 == ap_block_state47_on_subcall_done) & (1'b1 == ap_CS_fsm_state47))) begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state47;
            end
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_state31 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_state32 = ap_CS_fsm[32'd31];

assign ap_CS_fsm_state33 = ap_CS_fsm[32'd32];

assign ap_CS_fsm_state34 = ap_CS_fsm[32'd33];

assign ap_CS_fsm_state35 = ap_CS_fsm[32'd34];

assign ap_CS_fsm_state36 = ap_CS_fsm[32'd35];

assign ap_CS_fsm_state37 = ap_CS_fsm[32'd36];

assign ap_CS_fsm_state38 = ap_CS_fsm[32'd37];

assign ap_CS_fsm_state39 = ap_CS_fsm[32'd38];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state40 = ap_CS_fsm[32'd39];

assign ap_CS_fsm_state41 = ap_CS_fsm[32'd40];

assign ap_CS_fsm_state42 = ap_CS_fsm[32'd41];

assign ap_CS_fsm_state43 = ap_CS_fsm[32'd42];

assign ap_CS_fsm_state44 = ap_CS_fsm[32'd43];

assign ap_CS_fsm_state45 = ap_CS_fsm[32'd44];

assign ap_CS_fsm_state46 = ap_CS_fsm[32'd45];

assign ap_CS_fsm_state47 = ap_CS_fsm[32'd46];

assign ap_CS_fsm_state48 = ap_CS_fsm[32'd47];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_block_state20_on_subcall_done = ((grp_AddRoundKey_fu_474_ap_done == 1'b0) & (tmp_69_reg_851 == 1'd0));
end

always @ (*) begin
    ap_block_state47_on_subcall_done = ((grp_AddRoundKey_fu_474_ap_done == 1'b0) & (tmp_68_reg_1031 == 1'd0));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign cipher_or_i_cipher_r_read_fu_142_p2 = cipher_or_i_cipher;

assign grp_AddRoundKey_fu_474_ap_start = grp_AddRoundKey_fu_474_ap_start_reg;

assign grp_InvMixColumns_fu_556_ap_start = grp_InvMixColumns_fu_556_ap_start_reg;

assign grp_InvSubBytes_fu_540_ap_start = grp_InvSubBytes_fu_540_ap_start_reg;

assign grp_MixColumns_fu_524_ap_start = grp_MixColumns_fu_524_ap_start_reg;

assign grp_SubBytes_fu_508_ap_start = grp_SubBytes_fu_508_ap_start_reg;

assign grp_fu_573_p2 = ($signed(tmp_cast_reg_755) + $signed(9'd511));

assign i_1_fu_616_p2 = (i_0_i5_reg_408 + 5'd1);

assign i_2_fu_669_p2 = (i1_0_i1_reg_430 + 5'd1);

assign i_3_fu_686_p2 = (i1_0_i_reg_441 + 5'd1);

assign i_fu_703_p2 = (i_0_i_reg_452 + 5'd1);

assign j_0_i8_cast2_fu_632_p1 = j_0_i8_reg_419;

assign j_1_cast_c_fu_740_p1 = j_1_reg_1035;

assign j_1_cast_fu_736_p1 = j_1_reg_1035;

assign j_1_fu_720_p2 = (j_0_i_reg_463 + 4'd1);

assign j_fu_642_p2 = (j_0_i8_reg_419 + 4'd1);

assign tmp_133_cast_fu_726_p1 = j_0_i_reg_463;

assign tmp_137_cast_fu_653_p1 = j_0_i8_reg_419;

assign tmp_62_fu_610_p2 = ((i_0_i5_reg_408 == 5'd16) ? 1'b1 : 1'b0);

assign tmp_64_fu_709_p1 = i_0_i_reg_452;

assign tmp_66_fu_627_p2 = ($signed(Nr_read_reg_744) + $signed(8'd255));

assign tmp_67_fu_622_p1 = i_0_i5_reg_408;

assign tmp_68_fu_714_p2 = ((j_0_i_reg_463 == 4'd14) ? 1'b1 : 1'b0);

assign tmp_69_fu_636_p2 = ((j_0_i8_reg_419 == 4'd14) ? 1'b1 : 1'b0);

assign tmp_70_fu_730_p2 = ((tmp_133_cast_fu_726_p1 == reg_578) ? 1'b1 : 1'b0);

assign tmp_71_fu_648_p2 = (tmp_66_reg_846 - j_0_i8_cast2_fu_632_p1);

assign tmp_72_fu_657_p2 = ((tmp_137_cast_fu_653_p1 == reg_578) ? 1'b1 : 1'b0);

assign tmp_73_fu_663_p2 = ((i1_0_i1_reg_430 == 5'd16) ? 1'b1 : 1'b0);

assign tmp_74_fu_675_p1 = i1_0_i1_reg_430;

assign tmp_75_fu_680_p2 = ((i1_0_i_reg_441 == 5'd16) ? 1'b1 : 1'b0);

assign tmp_76_fu_692_p1 = i1_0_i_reg_441;

assign tmp_cast_fu_606_p1 = Nr;

assign tmp_s_fu_697_p2 = ((i_0_i_reg_452 == 5'd16) ? 1'b1 : 1'b0);

always @ (posedge ap_clk) begin
    tmp_cast_reg_755[8] <= 1'b0;
    tmp_67_reg_768[63:5] <= 59'b00000000000000000000000000000000000000000000000000000000000;
    tmp_74_reg_917[63:5] <= 59'b00000000000000000000000000000000000000000000000000000000000;
    tmp_76_reg_935[63:5] <= 59'b00000000000000000000000000000000000000000000000000000000000;
    tmp_64_reg_953[63:5] <= 59'b00000000000000000000000000000000000000000000000000000000000;
    j_1_cast_reg_1086[7:4] <= 4'b0000;
    j_1_cast_c_reg_1091[7:4] <= 4'b0000;
end

endmodule //AES_Full
