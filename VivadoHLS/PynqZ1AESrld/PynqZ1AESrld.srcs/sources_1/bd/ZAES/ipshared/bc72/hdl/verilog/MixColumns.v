// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module MixColumns (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        state_address0,
        state_ce0,
        state_we0,
        state_d0,
        state_q0,
        state_address1,
        state_ce1,
        state_we1,
        state_d1,
        state_q1
);

parameter    ap_ST_fsm_state1 = 16'd1;
parameter    ap_ST_fsm_state2 = 16'd2;
parameter    ap_ST_fsm_state3 = 16'd4;
parameter    ap_ST_fsm_state4 = 16'd8;
parameter    ap_ST_fsm_state5 = 16'd16;
parameter    ap_ST_fsm_state6 = 16'd32;
parameter    ap_ST_fsm_state7 = 16'd64;
parameter    ap_ST_fsm_state8 = 16'd128;
parameter    ap_ST_fsm_state9 = 16'd256;
parameter    ap_ST_fsm_state10 = 16'd512;
parameter    ap_ST_fsm_state11 = 16'd1024;
parameter    ap_ST_fsm_state12 = 16'd2048;
parameter    ap_ST_fsm_state13 = 16'd4096;
parameter    ap_ST_fsm_state14 = 16'd8192;
parameter    ap_ST_fsm_state15 = 16'd16384;
parameter    ap_ST_fsm_state16 = 16'd32768;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [3:0] state_address0;
output   state_ce0;
output   state_we0;
output  [7:0] state_d0;
input  [7:0] state_q0;
output  [3:0] state_address1;
output   state_ce1;
output   state_we1;
output  [7:0] state_d1;
input  [7:0] state_q1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[3:0] state_address0;
reg state_ce0;
reg state_we0;
reg[7:0] state_d0;
reg[3:0] state_address1;
reg state_ce1;
reg state_we1;
reg[7:0] state_d1;

(* fsm_encoding = "none" *) reg   [15:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [9:0] cipher_address0;
reg    cipher_ce0;
wire   [7:0] cipher_q0;
reg   [9:0] cipher_address1;
reg    cipher_ce1;
wire   [7:0] cipher_q1;
reg   [9:0] cipher_address2;
reg    cipher_ce2;
wire   [7:0] cipher_q2;
reg   [9:0] cipher_address3;
reg    cipher_ce3;
wire   [7:0] cipher_q3;
reg   [9:0] cipher_address4;
reg    cipher_ce4;
wire   [7:0] cipher_q4;
reg   [9:0] cipher_address5;
reg    cipher_ce5;
wire   [7:0] cipher_q5;
reg   [9:0] cipher_address6;
reg    cipher_ce6;
wire   [7:0] cipher_q6;
reg   [9:0] cipher_address7;
reg    cipher_ce7;
wire   [7:0] cipher_q7;
reg   [7:0] reg_484;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_state9;
reg   [7:0] reg_488;
wire   [3:0] state_addr_reg_1028;
wire   [3:0] state_addr_17_reg_1033;
wire   [3:0] state_addr_16_reg_1038;
wire   [3:0] state_addr_18_reg_1043;
reg   [7:0] state_load_2_reg_1048;
wire    ap_CS_fsm_state3;
reg   [7:0] state_load_3_reg_1056;
wire   [3:0] state_addr_19_reg_1064;
wire   [3:0] state_addr_20_reg_1069;
reg   [7:0] state_load_4_reg_1074;
wire    ap_CS_fsm_state4;
reg   [7:0] state_load_5_reg_1082;
wire   [3:0] state_addr_21_reg_1090;
wire   [3:0] state_addr_22_reg_1095;
reg   [7:0] state_load_6_reg_1100;
wire    ap_CS_fsm_state5;
reg   [7:0] state_load_7_reg_1108;
wire   [3:0] state_addr_23_reg_1116;
wire   [3:0] state_addr_24_reg_1121;
reg   [7:0] state_load_8_reg_1126;
wire    ap_CS_fsm_state6;
reg   [7:0] state_load_9_reg_1134;
wire   [3:0] state_addr_25_reg_1142;
wire   [3:0] state_addr_26_reg_1147;
reg   [7:0] state_load_10_reg_1152;
wire    ap_CS_fsm_state7;
reg   [7:0] state_load_11_reg_1160;
wire   [3:0] state_addr_27_reg_1168;
wire   [3:0] state_addr_28_reg_1173;
wire    ap_CS_fsm_state8;
reg   [7:0] state_load_12_reg_1218;
reg   [7:0] state_load_13_reg_1226;
wire   [3:0] state_addr_29_reg_1234;
wire   [3:0] state_addr_30_reg_1239;
wire   [7:0] tmp_s_fu_607_p2;
reg   [7:0] tmp_s_reg_1244;
wire   [7:0] tmp_3_fu_624_p2;
reg   [7:0] tmp_3_reg_1249;
wire    ap_CS_fsm_state10;
wire   [7:0] tmp_4_fu_738_p2;
reg   [7:0] tmp_4_reg_1294;
wire    ap_CS_fsm_state11;
wire   [7:0] tmp_5_fu_754_p2;
reg   [7:0] tmp_5_reg_1299;
wire    ap_CS_fsm_state12;
wire   [7:0] tmp_10_fu_868_p2;
reg   [7:0] tmp_10_reg_1344;
wire    ap_CS_fsm_state13;
wire   [7:0] tmp_11_fu_884_p2;
reg   [7:0] tmp_11_reg_1349;
wire    ap_CS_fsm_state14;
wire   [7:0] tmp_14_fu_1005_p2;
reg   [7:0] tmp_14_reg_1394;
wire    ap_CS_fsm_state15;
wire   [7:0] tmp_15_fu_1022_p2;
reg   [7:0] tmp_15_reg_1399;
wire   [63:0] addr_fu_492_p3;
wire   [63:0] addr1_fu_501_p3;
wire   [63:0] addr2_fu_510_p3;
wire   [63:0] addr3_fu_519_p3;
wire   [63:0] addr4_fu_527_p3;
wire   [63:0] addr5_fu_535_p3;
wire   [63:0] addr6_fu_543_p3;
wire   [63:0] addr7_fu_552_p3;
wire   [63:0] addr8_fu_630_p3;
wire   [63:0] addr9_fu_638_p3;
wire   [63:0] addr10_fu_646_p3;
wire   [63:0] addr11_fu_654_p3;
wire   [63:0] addr12_fu_662_p3;
wire   [63:0] addr13_fu_670_p3;
wire   [63:0] addr14_fu_678_p3;
wire   [63:0] addr15_fu_686_p3;
wire   [63:0] addr16_fu_760_p3;
wire   [63:0] addr17_fu_768_p3;
wire   [63:0] addr18_fu_776_p3;
wire   [63:0] addr19_fu_784_p3;
wire   [63:0] addr20_fu_792_p3;
wire   [63:0] addr21_fu_800_p3;
wire   [63:0] addr22_fu_808_p3;
wire   [63:0] addr23_fu_816_p3;
wire   [63:0] addr24_fu_890_p3;
wire   [63:0] addr25_fu_898_p3;
wire   [63:0] addr26_fu_906_p3;
wire   [63:0] addr27_fu_914_p3;
wire   [63:0] addr28_fu_923_p3;
wire   [63:0] addr29_fu_932_p3;
wire   [63:0] addr30_fu_941_p3;
wire   [63:0] addr31_fu_949_p3;
wire   [7:0] tmp_7_fu_570_p2;
wire   [7:0] tmp_1_fu_588_p2;
wire   [7:0] tmp_9_fu_704_p2;
wire   [7:0] tmp_2_fu_721_p2;
wire   [7:0] tmp_6_fu_834_p2;
wire   [7:0] tmp_8_fu_851_p2;
wire   [7:0] tmp_12_fu_970_p2;
wire   [7:0] tmp_13_fu_988_p2;
wire    ap_CS_fsm_state16;
wire   [7:0] tmp2_fu_566_p2;
wire   [7:0] tmp1_fu_560_p2;
wire   [7:0] tmp4_fu_582_p2;
wire   [7:0] tmp3_fu_577_p2;
wire   [7:0] tmp6_fu_601_p2;
wire   [7:0] tmp5_fu_595_p2;
wire   [7:0] tmp8_fu_618_p2;
wire   [7:0] tmp7_fu_613_p2;
wire   [7:0] tmp_fu_700_p2;
wire   [7:0] tmp9_fu_694_p2;
wire   [7:0] tmp11_fu_715_p2;
wire   [7:0] tmp10_fu_711_p2;
wire   [7:0] tmp13_fu_732_p2;
wire   [7:0] tmp12_fu_728_p2;
wire   [7:0] tmp15_fu_748_p2;
wire   [7:0] tmp14_fu_744_p2;
wire   [7:0] tmp17_fu_830_p2;
wire   [7:0] tmp16_fu_824_p2;
wire   [7:0] tmp19_fu_845_p2;
wire   [7:0] tmp18_fu_841_p2;
wire   [7:0] tmp21_fu_862_p2;
wire   [7:0] tmp20_fu_858_p2;
wire   [7:0] tmp23_fu_878_p2;
wire   [7:0] tmp22_fu_874_p2;
wire   [7:0] tmp25_fu_964_p2;
wire   [7:0] tmp24_fu_958_p2;
wire   [7:0] tmp27_fu_982_p2;
wire   [7:0] tmp26_fu_977_p2;
wire   [7:0] tmp29_fu_999_p2;
wire   [7:0] tmp28_fu_995_p2;
wire   [7:0] tmp31_fu_1016_p2;
wire   [7:0] tmp30_fu_1011_p2;
reg   [15:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 16'd1;
end

MixColumns_cipher #(
    .DataWidth( 8 ),
    .AddressRange( 768 ),
    .AddressWidth( 10 ))
cipher_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(cipher_address0),
    .ce0(cipher_ce0),
    .q0(cipher_q0),
    .address1(cipher_address1),
    .ce1(cipher_ce1),
    .q1(cipher_q1),
    .address2(cipher_address2),
    .ce2(cipher_ce2),
    .q2(cipher_q2),
    .address3(cipher_address3),
    .ce3(cipher_ce3),
    .q3(cipher_q3),
    .address4(cipher_address4),
    .ce4(cipher_ce4),
    .q4(cipher_q4),
    .address5(cipher_address5),
    .ce5(cipher_ce5),
    .q5(cipher_q5),
    .address6(cipher_address6),
    .ce6(cipher_ce6),
    .q6(cipher_q6),
    .address7(cipher_address7),
    .ce7(cipher_ce7),
    .q7(cipher_q7)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state2))) begin
        reg_484 <= state_q0;
        reg_488 <= state_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        state_load_10_reg_1152 <= state_q0;
        state_load_11_reg_1160 <= state_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        state_load_12_reg_1218 <= state_q0;
        state_load_13_reg_1226 <= state_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        state_load_2_reg_1048 <= state_q0;
        state_load_3_reg_1056 <= state_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        state_load_4_reg_1074 <= state_q0;
        state_load_5_reg_1082 <= state_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        state_load_6_reg_1100 <= state_q0;
        state_load_7_reg_1108 <= state_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        state_load_8_reg_1126 <= state_q0;
        state_load_9_reg_1134 <= state_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        tmp_10_reg_1344 <= tmp_10_fu_868_p2;
        tmp_11_reg_1349 <= tmp_11_fu_884_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        tmp_14_reg_1394 <= tmp_14_fu_1005_p2;
        tmp_15_reg_1399 <= tmp_15_fu_1022_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        tmp_3_reg_1249 <= tmp_3_fu_624_p2;
        tmp_s_reg_1244 <= tmp_s_fu_607_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        tmp_4_reg_1294 <= tmp_4_fu_738_p2;
        tmp_5_reg_1299 <= tmp_5_fu_754_p2;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state16) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        cipher_address0 = addr24_fu_890_p3;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        cipher_address0 = addr16_fu_760_p3;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        cipher_address0 = addr8_fu_630_p3;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        cipher_address0 = addr_fu_492_p3;
    end else begin
        cipher_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        cipher_address1 = addr25_fu_898_p3;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        cipher_address1 = addr17_fu_768_p3;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        cipher_address1 = addr9_fu_638_p3;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        cipher_address1 = addr1_fu_501_p3;
    end else begin
        cipher_address1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        cipher_address2 = addr26_fu_906_p3;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        cipher_address2 = addr18_fu_776_p3;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        cipher_address2 = addr10_fu_646_p3;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        cipher_address2 = addr2_fu_510_p3;
    end else begin
        cipher_address2 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        cipher_address3 = addr27_fu_914_p3;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        cipher_address3 = addr19_fu_784_p3;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        cipher_address3 = addr11_fu_654_p3;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        cipher_address3 = addr3_fu_519_p3;
    end else begin
        cipher_address3 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        cipher_address4 = addr28_fu_923_p3;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        cipher_address4 = addr20_fu_792_p3;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        cipher_address4 = addr12_fu_662_p3;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        cipher_address4 = addr4_fu_527_p3;
    end else begin
        cipher_address4 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        cipher_address5 = addr29_fu_932_p3;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        cipher_address5 = addr21_fu_800_p3;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        cipher_address5 = addr13_fu_670_p3;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        cipher_address5 = addr5_fu_535_p3;
    end else begin
        cipher_address5 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        cipher_address6 = addr30_fu_941_p3;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        cipher_address6 = addr22_fu_808_p3;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        cipher_address6 = addr14_fu_678_p3;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        cipher_address6 = addr6_fu_543_p3;
    end else begin
        cipher_address6 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        cipher_address7 = addr31_fu_949_p3;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        cipher_address7 = addr23_fu_816_p3;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        cipher_address7 = addr15_fu_686_p3;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        cipher_address7 = addr7_fu_552_p3;
    end else begin
        cipher_address7 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state8))) begin
        cipher_ce0 = 1'b1;
    end else begin
        cipher_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state8))) begin
        cipher_ce1 = 1'b1;
    end else begin
        cipher_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state8))) begin
        cipher_ce2 = 1'b1;
    end else begin
        cipher_ce2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state8))) begin
        cipher_ce3 = 1'b1;
    end else begin
        cipher_ce3 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state8))) begin
        cipher_ce4 = 1'b1;
    end else begin
        cipher_ce4 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state8))) begin
        cipher_ce5 = 1'b1;
    end else begin
        cipher_ce5 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state8))) begin
        cipher_ce6 = 1'b1;
    end else begin
        cipher_ce6 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state8))) begin
        cipher_ce7 = 1'b1;
    end else begin
        cipher_ce7 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        state_address0 = state_addr_29_reg_1234;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        state_address0 = state_addr_27_reg_1168;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        state_address0 = state_addr_25_reg_1142;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        state_address0 = state_addr_23_reg_1116;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        state_address0 = state_addr_21_reg_1090;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        state_address0 = state_addr_19_reg_1064;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        state_address0 = state_addr_16_reg_1038;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        state_address0 = state_addr_reg_1028;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        state_address0 = 64'd14;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        state_address0 = 64'd12;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        state_address0 = 64'd10;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        state_address0 = 64'd8;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        state_address0 = 64'd6;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        state_address0 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        state_address0 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        state_address0 = 64'd0;
    end else begin
        state_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        state_address1 = state_addr_30_reg_1239;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        state_address1 = state_addr_28_reg_1173;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        state_address1 = state_addr_26_reg_1147;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        state_address1 = state_addr_24_reg_1121;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        state_address1 = state_addr_22_reg_1095;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        state_address1 = state_addr_20_reg_1069;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        state_address1 = state_addr_18_reg_1043;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        state_address1 = state_addr_17_reg_1033;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        state_address1 = 64'd15;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        state_address1 = 64'd13;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        state_address1 = 64'd11;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        state_address1 = 64'd9;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        state_address1 = 64'd7;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        state_address1 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        state_address1 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        state_address1 = 64'd1;
    end else begin
        state_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        state_ce0 = 1'b1;
    end else begin
        state_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        state_ce1 = 1'b1;
    end else begin
        state_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        state_d0 = tmp_14_reg_1394;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        state_d0 = tmp_12_fu_970_p2;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        state_d0 = tmp_10_reg_1344;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        state_d0 = tmp_6_fu_834_p2;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        state_d0 = tmp_4_reg_1294;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        state_d0 = tmp_9_fu_704_p2;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        state_d0 = tmp_s_reg_1244;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        state_d0 = tmp_7_fu_570_p2;
    end else begin
        state_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        state_d1 = tmp_15_reg_1399;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        state_d1 = tmp_13_fu_988_p2;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        state_d1 = tmp_11_reg_1349;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        state_d1 = tmp_8_fu_851_p2;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        state_d1 = tmp_5_reg_1299;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        state_d1 = tmp_2_fu_721_p2;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        state_d1 = tmp_3_reg_1249;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        state_d1 = tmp_1_fu_588_p2;
    end else begin
        state_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10))) begin
        state_we0 = 1'b1;
    end else begin
        state_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10))) begin
        state_we1 = 1'b1;
    end else begin
        state_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign addr10_fu_646_p3 = {{56'd1}, {state_load_5_reg_1082}};

assign addr11_fu_654_p3 = {{56'd2}, {state_load_6_reg_1100}};

assign addr12_fu_662_p3 = {{56'd1}, {state_load_6_reg_1100}};

assign addr13_fu_670_p3 = {{56'd2}, {state_load_7_reg_1108}};

assign addr14_fu_678_p3 = {{56'd2}, {state_load_4_reg_1074}};

assign addr15_fu_686_p3 = {{56'd1}, {state_load_7_reg_1108}};

assign addr16_fu_760_p3 = {{56'd1}, {state_load_8_reg_1126}};

assign addr17_fu_768_p3 = {{56'd2}, {state_load_9_reg_1134}};

assign addr18_fu_776_p3 = {{56'd1}, {state_load_9_reg_1134}};

assign addr19_fu_784_p3 = {{56'd2}, {state_load_10_reg_1152}};

assign addr1_fu_501_p3 = {{56'd2}, {reg_488}};

assign addr20_fu_792_p3 = {{56'd1}, {state_load_10_reg_1152}};

assign addr21_fu_800_p3 = {{56'd2}, {state_load_11_reg_1160}};

assign addr22_fu_808_p3 = {{56'd2}, {state_load_8_reg_1126}};

assign addr23_fu_816_p3 = {{56'd1}, {state_load_11_reg_1160}};

assign addr24_fu_890_p3 = {{56'd1}, {state_load_12_reg_1218}};

assign addr25_fu_898_p3 = {{56'd2}, {state_load_13_reg_1226}};

assign addr26_fu_906_p3 = {{56'd1}, {state_load_13_reg_1226}};

assign addr27_fu_914_p3 = {{56'd2}, {reg_484}};

assign addr28_fu_923_p3 = {{56'd1}, {reg_484}};

assign addr29_fu_932_p3 = {{56'd2}, {reg_488}};

assign addr2_fu_510_p3 = {{56'd1}, {reg_488}};

assign addr30_fu_941_p3 = {{56'd2}, {state_load_12_reg_1218}};

assign addr31_fu_949_p3 = {{56'd1}, {reg_488}};

assign addr3_fu_519_p3 = {{56'd2}, {state_load_2_reg_1048}};

assign addr4_fu_527_p3 = {{56'd1}, {state_load_2_reg_1048}};

assign addr5_fu_535_p3 = {{56'd2}, {state_load_3_reg_1056}};

assign addr6_fu_543_p3 = {{56'd2}, {reg_484}};

assign addr7_fu_552_p3 = {{56'd1}, {state_load_3_reg_1056}};

assign addr8_fu_630_p3 = {{56'd1}, {state_load_4_reg_1074}};

assign addr9_fu_638_p3 = {{56'd2}, {state_load_5_reg_1082}};

assign addr_fu_492_p3 = {{56'd1}, {reg_484}};

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign state_addr_16_reg_1038 = 64'd2;

assign state_addr_17_reg_1033 = 64'd1;

assign state_addr_18_reg_1043 = 64'd3;

assign state_addr_19_reg_1064 = 64'd4;

assign state_addr_20_reg_1069 = 64'd5;

assign state_addr_21_reg_1090 = 64'd6;

assign state_addr_22_reg_1095 = 64'd7;

assign state_addr_23_reg_1116 = 64'd8;

assign state_addr_24_reg_1121 = 64'd9;

assign state_addr_25_reg_1142 = 64'd10;

assign state_addr_26_reg_1147 = 64'd11;

assign state_addr_27_reg_1168 = 64'd12;

assign state_addr_28_reg_1173 = 64'd13;

assign state_addr_29_reg_1234 = 64'd14;

assign state_addr_30_reg_1239 = 64'd15;

assign state_addr_reg_1028 = 64'd0;

assign tmp10_fu_711_p2 = (state_load_7_reg_1108 ^ state_load_4_reg_1074);

assign tmp11_fu_715_p2 = (cipher_q3 ^ cipher_q2);

assign tmp12_fu_728_p2 = (state_load_5_reg_1082 ^ state_load_4_reg_1074);

assign tmp13_fu_732_p2 = (cipher_q5 ^ cipher_q4);

assign tmp14_fu_744_p2 = (state_load_6_reg_1100 ^ state_load_5_reg_1082);

assign tmp15_fu_748_p2 = (cipher_q7 ^ cipher_q6);

assign tmp16_fu_824_p2 = (cipher_q1 ^ cipher_q0);

assign tmp17_fu_830_p2 = (state_load_11_reg_1160 ^ state_load_10_reg_1152);

assign tmp18_fu_841_p2 = (state_load_8_reg_1126 ^ state_load_11_reg_1160);

assign tmp19_fu_845_p2 = (cipher_q3 ^ cipher_q2);

assign tmp1_fu_560_p2 = (cipher_q1 ^ cipher_q0);

assign tmp20_fu_858_p2 = (state_load_9_reg_1134 ^ state_load_8_reg_1126);

assign tmp21_fu_862_p2 = (cipher_q5 ^ cipher_q4);

assign tmp22_fu_874_p2 = (state_load_9_reg_1134 ^ state_load_10_reg_1152);

assign tmp23_fu_878_p2 = (cipher_q7 ^ cipher_q6);

assign tmp24_fu_958_p2 = (cipher_q1 ^ cipher_q0);

assign tmp25_fu_964_p2 = (reg_488 ^ reg_484);

assign tmp26_fu_977_p2 = (state_load_12_reg_1218 ^ reg_488);

assign tmp27_fu_982_p2 = (cipher_q3 ^ cipher_q2);

assign tmp28_fu_995_p2 = (state_load_13_reg_1226 ^ state_load_12_reg_1218);

assign tmp29_fu_999_p2 = (cipher_q5 ^ cipher_q4);

assign tmp2_fu_566_p2 = (state_load_3_reg_1056 ^ state_load_2_reg_1048);

assign tmp30_fu_1011_p2 = (state_load_13_reg_1226 ^ reg_484);

assign tmp31_fu_1016_p2 = (cipher_q7 ^ cipher_q6);

assign tmp3_fu_577_p2 = (state_load_3_reg_1056 ^ reg_484);

assign tmp4_fu_582_p2 = (cipher_q3 ^ cipher_q2);

assign tmp5_fu_595_p2 = (reg_488 ^ reg_484);

assign tmp6_fu_601_p2 = (cipher_q5 ^ cipher_q4);

assign tmp7_fu_613_p2 = (state_load_2_reg_1048 ^ reg_488);

assign tmp8_fu_618_p2 = (cipher_q7 ^ cipher_q6);

assign tmp9_fu_694_p2 = (cipher_q1 ^ cipher_q0);

assign tmp_10_fu_868_p2 = (tmp21_fu_862_p2 ^ tmp20_fu_858_p2);

assign tmp_11_fu_884_p2 = (tmp23_fu_878_p2 ^ tmp22_fu_874_p2);

assign tmp_12_fu_970_p2 = (tmp25_fu_964_p2 ^ tmp24_fu_958_p2);

assign tmp_13_fu_988_p2 = (tmp27_fu_982_p2 ^ tmp26_fu_977_p2);

assign tmp_14_fu_1005_p2 = (tmp29_fu_999_p2 ^ tmp28_fu_995_p2);

assign tmp_15_fu_1022_p2 = (tmp31_fu_1016_p2 ^ tmp30_fu_1011_p2);

assign tmp_1_fu_588_p2 = (tmp4_fu_582_p2 ^ tmp3_fu_577_p2);

assign tmp_2_fu_721_p2 = (tmp11_fu_715_p2 ^ tmp10_fu_711_p2);

assign tmp_3_fu_624_p2 = (tmp8_fu_618_p2 ^ tmp7_fu_613_p2);

assign tmp_4_fu_738_p2 = (tmp13_fu_732_p2 ^ tmp12_fu_728_p2);

assign tmp_5_fu_754_p2 = (tmp15_fu_748_p2 ^ tmp14_fu_744_p2);

assign tmp_6_fu_834_p2 = (tmp17_fu_830_p2 ^ tmp16_fu_824_p2);

assign tmp_7_fu_570_p2 = (tmp2_fu_566_p2 ^ tmp1_fu_560_p2);

assign tmp_8_fu_851_p2 = (tmp19_fu_845_p2 ^ tmp18_fu_841_p2);

assign tmp_9_fu_704_p2 = (tmp_fu_700_p2 ^ tmp9_fu_694_p2);

assign tmp_fu_700_p2 = (state_load_7_reg_1108 ^ state_load_6_reg_1100);

assign tmp_s_fu_607_p2 = (tmp6_fu_601_p2 ^ tmp5_fu_595_p2);

endmodule //MixColumns
