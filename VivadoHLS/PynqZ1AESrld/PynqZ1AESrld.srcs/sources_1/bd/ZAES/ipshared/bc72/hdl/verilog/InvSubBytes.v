// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module InvSubBytes (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        state_address0,
        state_ce0,
        state_we0,
        state_d0,
        state_q0,
        state_address1,
        state_ce1,
        state_we1,
        state_d1,
        state_q1
);

parameter    ap_ST_fsm_state1 = 16'd1;
parameter    ap_ST_fsm_state2 = 16'd2;
parameter    ap_ST_fsm_state3 = 16'd4;
parameter    ap_ST_fsm_state4 = 16'd8;
parameter    ap_ST_fsm_state5 = 16'd16;
parameter    ap_ST_fsm_state6 = 16'd32;
parameter    ap_ST_fsm_state7 = 16'd64;
parameter    ap_ST_fsm_state8 = 16'd128;
parameter    ap_ST_fsm_state9 = 16'd256;
parameter    ap_ST_fsm_state10 = 16'd512;
parameter    ap_ST_fsm_state11 = 16'd1024;
parameter    ap_ST_fsm_state12 = 16'd2048;
parameter    ap_ST_fsm_state13 = 16'd4096;
parameter    ap_ST_fsm_state14 = 16'd8192;
parameter    ap_ST_fsm_state15 = 16'd16384;
parameter    ap_ST_fsm_state16 = 16'd32768;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [3:0] state_address0;
output   state_ce0;
output   state_we0;
output  [7:0] state_d0;
input  [7:0] state_q0;
output  [3:0] state_address1;
output   state_ce1;
output   state_we1;
output  [7:0] state_d1;
input  [7:0] state_q1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[3:0] state_address0;
reg state_ce0;
reg state_we0;
reg[3:0] state_address1;
reg state_ce1;
reg state_we1;

(* fsm_encoding = "none" *) reg   [15:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [10:0] decipher_address0;
reg    decipher_ce0;
wire   [7:0] decipher_q0;
reg   [10:0] decipher_address1;
reg    decipher_ce1;
wire   [7:0] decipher_q1;
reg   [7:0] reg_328;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_state8;
reg   [7:0] reg_332;
reg   [7:0] reg_336;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state9;
reg   [7:0] reg_340;
wire   [3:0] state_addr_reg_416;
wire   [3:0] state_addr_31_reg_421;
wire   [3:0] state_addr_32_reg_426;
wire   [3:0] state_addr_33_reg_431;
wire   [3:0] state_addr_34_reg_436;
wire   [3:0] state_addr_35_reg_441;
reg   [7:0] state_load_4_reg_446;
wire    ap_CS_fsm_state4;
reg   [7:0] state_load_5_reg_451;
wire   [3:0] state_addr_36_reg_456;
wire   [3:0] state_addr_37_reg_461;
reg   [7:0] state_load_6_reg_466;
wire    ap_CS_fsm_state5;
reg   [7:0] state_load_7_reg_471;
wire   [3:0] state_addr_38_reg_476;
wire   [3:0] state_addr_39_reg_481;
reg   [7:0] state_load_8_reg_486;
wire    ap_CS_fsm_state6;
reg   [7:0] state_load_9_reg_491;
wire   [3:0] state_addr_40_reg_496;
wire   [3:0] state_addr_41_reg_501;
reg   [7:0] state_load_10_reg_506;
wire    ap_CS_fsm_state7;
reg   [7:0] state_load_11_reg_511;
wire   [3:0] state_addr_42_reg_516;
wire   [3:0] state_addr_43_reg_521;
wire   [3:0] state_addr_44_reg_536;
wire   [3:0] state_addr_45_reg_541;
wire    ap_CS_fsm_state10;
wire    ap_CS_fsm_state11;
wire    ap_CS_fsm_state12;
wire    ap_CS_fsm_state13;
wire    ap_CS_fsm_state14;
wire    ap_CS_fsm_state15;
wire   [63:0] tmp_s_fu_344_p1;
wire   [63:0] tmp_65_1_fu_349_p1;
wire   [63:0] tmp_65_2_fu_354_p1;
wire   [63:0] tmp_65_3_fu_359_p1;
wire   [63:0] tmp_65_4_fu_364_p1;
wire   [63:0] tmp_65_5_fu_368_p1;
wire   [63:0] tmp_65_6_fu_372_p1;
wire   [63:0] tmp_65_7_fu_376_p1;
wire   [63:0] tmp_65_8_fu_380_p1;
wire   [63:0] tmp_65_9_fu_384_p1;
wire   [63:0] tmp_65_s_fu_388_p1;
wire   [63:0] tmp_65_10_fu_392_p1;
wire   [63:0] tmp_65_11_fu_396_p1;
wire   [63:0] tmp_65_12_fu_401_p1;
wire   [63:0] tmp_65_13_fu_406_p1;
wire   [63:0] tmp_65_14_fu_411_p1;
wire    ap_CS_fsm_state16;
reg   [15:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 16'd1;
end

InvSubBytes_decipcud #(
    .DataWidth( 8 ),
    .AddressRange( 1280 ),
    .AddressWidth( 11 ))
decipher_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(decipher_address0),
    .ce0(decipher_ce0),
    .q0(decipher_q0),
    .address1(decipher_address1),
    .ce1(decipher_ce1),
    .q1(decipher_q1)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state2))) begin
        reg_328 <= state_q0;
        reg_332 <= state_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state3))) begin
        reg_336 <= state_q0;
        reg_340 <= state_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        state_load_10_reg_506 <= state_q0;
        state_load_11_reg_511 <= state_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        state_load_4_reg_446 <= state_q0;
        state_load_5_reg_451 <= state_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        state_load_6_reg_466 <= state_q0;
        state_load_7_reg_471 <= state_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        state_load_8_reg_486 <= state_q0;
        state_load_9_reg_491 <= state_q1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state16) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        decipher_address0 = tmp_65_13_fu_406_p1;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        decipher_address0 = tmp_65_11_fu_396_p1;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        decipher_address0 = tmp_65_s_fu_388_p1;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        decipher_address0 = tmp_65_8_fu_380_p1;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        decipher_address0 = tmp_65_6_fu_372_p1;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        decipher_address0 = tmp_65_4_fu_364_p1;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        decipher_address0 = tmp_65_2_fu_354_p1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        decipher_address0 = tmp_s_fu_344_p1;
    end else begin
        decipher_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        decipher_address1 = tmp_65_14_fu_411_p1;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        decipher_address1 = tmp_65_12_fu_401_p1;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        decipher_address1 = tmp_65_10_fu_392_p1;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        decipher_address1 = tmp_65_9_fu_384_p1;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        decipher_address1 = tmp_65_7_fu_376_p1;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        decipher_address1 = tmp_65_5_fu_368_p1;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        decipher_address1 = tmp_65_3_fu_359_p1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        decipher_address1 = tmp_65_1_fu_349_p1;
    end else begin
        decipher_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10))) begin
        decipher_ce0 = 1'b1;
    end else begin
        decipher_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10))) begin
        decipher_ce1 = 1'b1;
    end else begin
        decipher_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        state_address0 = state_addr_44_reg_536;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        state_address0 = state_addr_42_reg_516;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        state_address0 = state_addr_40_reg_496;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        state_address0 = state_addr_38_reg_476;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        state_address0 = state_addr_36_reg_456;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        state_address0 = state_addr_34_reg_436;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        state_address0 = state_addr_32_reg_426;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        state_address0 = state_addr_reg_416;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        state_address0 = 64'd14;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        state_address0 = 64'd12;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        state_address0 = 64'd10;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        state_address0 = 64'd8;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        state_address0 = 64'd6;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        state_address0 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        state_address0 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        state_address0 = 64'd0;
    end else begin
        state_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        state_address1 = state_addr_45_reg_541;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        state_address1 = state_addr_43_reg_521;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        state_address1 = state_addr_41_reg_501;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        state_address1 = state_addr_39_reg_481;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        state_address1 = state_addr_37_reg_461;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        state_address1 = state_addr_35_reg_441;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        state_address1 = state_addr_33_reg_431;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        state_address1 = state_addr_31_reg_421;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        state_address1 = 64'd15;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        state_address1 = 64'd13;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        state_address1 = 64'd11;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        state_address1 = 64'd9;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        state_address1 = 64'd7;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        state_address1 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        state_address1 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        state_address1 = 64'd1;
    end else begin
        state_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        state_ce0 = 1'b1;
    end else begin
        state_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        state_ce1 = 1'b1;
    end else begin
        state_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10))) begin
        state_we0 = 1'b1;
    end else begin
        state_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10))) begin
        state_we1 = 1'b1;
    end else begin
        state_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign state_addr_31_reg_421 = 64'd1;

assign state_addr_32_reg_426 = 64'd2;

assign state_addr_33_reg_431 = 64'd3;

assign state_addr_34_reg_436 = 64'd4;

assign state_addr_35_reg_441 = 64'd5;

assign state_addr_36_reg_456 = 64'd6;

assign state_addr_37_reg_461 = 64'd7;

assign state_addr_38_reg_476 = 64'd8;

assign state_addr_39_reg_481 = 64'd9;

assign state_addr_40_reg_496 = 64'd10;

assign state_addr_41_reg_501 = 64'd11;

assign state_addr_42_reg_516 = 64'd12;

assign state_addr_43_reg_521 = 64'd13;

assign state_addr_44_reg_536 = 64'd14;

assign state_addr_45_reg_541 = 64'd15;

assign state_addr_reg_416 = 64'd0;

assign state_d0 = decipher_q0;

assign state_d1 = decipher_q1;

assign tmp_65_10_fu_392_p1 = state_load_11_reg_511;

assign tmp_65_11_fu_396_p1 = reg_328;

assign tmp_65_12_fu_401_p1 = reg_332;

assign tmp_65_13_fu_406_p1 = reg_336;

assign tmp_65_14_fu_411_p1 = reg_340;

assign tmp_65_1_fu_349_p1 = reg_332;

assign tmp_65_2_fu_354_p1 = reg_336;

assign tmp_65_3_fu_359_p1 = reg_340;

assign tmp_65_4_fu_364_p1 = state_load_4_reg_446;

assign tmp_65_5_fu_368_p1 = state_load_5_reg_451;

assign tmp_65_6_fu_372_p1 = state_load_6_reg_466;

assign tmp_65_7_fu_376_p1 = state_load_7_reg_471;

assign tmp_65_8_fu_380_p1 = state_load_8_reg_486;

assign tmp_65_9_fu_384_p1 = state_load_9_reg_491;

assign tmp_65_s_fu_388_p1 = state_load_10_reg_506;

assign tmp_s_fu_344_p1 = reg_328;

endmodule //InvSubBytes
